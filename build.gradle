buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.8'
	id 'io.franzbecker.gradle-lombok' version '1.8'
	id 'com.github.ben-manes.versions' version '0.14.0'
	id 'edu.sc.seis.launch4j' version '2.3.0'
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	jcenter()
	maven {
		url "http://jasperreports.sourceforge.net/maven2/"
	}
}

ext {
	retrofitVersion = "2.2.0"
	poiVersion = "3.16"
}

/*
configurations {
	all.collect { configuration ->
		configuration.exclude group:'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	}
}
*/


dependencies {
	compile('org.springframework.boot:spring-boot-devtools')
	compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-web')
//	providedCompile('org.springframework.boot:spring-boot-starter-undertow')
//	providedRuntime('org.springframework.boot:spring-boot-starter-undertow')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	compile('org.springframework.security:spring-security-web')
    compile('org.springframework.security:spring-security-config')
    compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.3.RELEASE')
	compile('com.fasterxml.jackson.datatype:jackson-datatype-hibernate5')
	compile('org.mariadb.jdbc:mariadb-java-client')
	compile('com.querydsl:querydsl-jpa')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0')
	compile("com.squareup.retrofit2:retrofit:$retrofitVersion")
	compile("com.squareup.retrofit2:converter-scalars:$retrofitVersion")
	compile("com.squareup.retrofit2:converter-jackson:$retrofitVersion")
    compile("com.squareup.retrofit2:adapter-rxjava:$retrofitVersion")
	compile('com.squareup.okhttp3:logging-interceptor:3.7.0')
	compile('io.reactivex:rxjava:1.2.9')
	compile('net.sourceforge.dynamicreports:dynamicreports-core:5.0.0')
	compile('net.sourceforge.barbecue:barbecue:1.5-beta1')
	compile("org.apache.poi:poi:$poiVersion")
    compile("org.apache.poi:poi-ooxml:$poiVersion")
    compile("org.apache.poi:poi-ooxml-schemas:$poiVersion")
	compile('commons-io:commons-io:2.5')
	compile('org.apache.commons:commons-lang3:3.5')
	compile('com.google.code.gson:gson')
	compile('net.lingala.zip4j:zip4j:1.3.2')
  	compile('joda-time:joda-time')
}

project.afterEvaluate {
	project.tasks.compileQuerydsl.options.compilerArgs = [
		"-proc:only",
		"-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor,com.querydsl.apt.jpa.JPAAnnotationProcessor'
	]
}

task bowerInstall(type: Exec){
	if(System.getProperty('os.name').toLowerCase().contains('windows')){
		commandLine 'cmd', '/c','bower','install'
	}else{
		commandLine 'bower', 'install'
	}
}

classes.dependsOn bowerInstall

launch4j {
	headerType "console"
	jreMinVersion "1.8.0"
	initialHeapSize 2048
	maxHeapSize 2048

}

jar.finalizedBy(bootRepackage)
bootRepackage.withJarTask = jar

bootRun {
	addResources = true
    systemProperties System.properties
}

dependencyUpdates.resolutionStrategy = {
	componentSelection { rules ->
		rules.all { ComponentSelection selection ->
			boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
				selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
			}
			
			if (rejected) selection.reject('Release candidate')
		}
	}
}
