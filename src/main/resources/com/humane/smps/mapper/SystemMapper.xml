<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.humane.smps.mapper.SystemMapper">
    <select id="account" resultType="com.humane.smps.dto.AccountDto">
        select *
        from (select user.user_id, user.password,
            if(user_role.role_name = 'ROLE_ADMIN', '', concat(count(user_admission.admission_cd), '개')) as admissions
            , (select group_concat(admission.admission_nm) from user_admission
            inner join admission on admission.admission_cd = user_admission.admission_cd where user.user_id = user_id group by user_id
            ) as lists
            , case user_role.role_name
            when 'ROLE_ADMIN' then '관리자'
            when 'ROLE_USER' then '사용자'
            else '신분증확인용' end as role
            , user_role.role_name
            from user
            inner join user_role on user_role.user_id = user.user_id
            left join user_admission on user_admission.user_id = user.user_id
            left join admission on admission.admission_cd = user_admission.admission_cd
            <where>
                <!--not user.user_id = 'api' and not user.user_id = 'admin'-->
                <if test="param != null">
                    <if test="param.userId != null">and user_id like '%' #{param.user_id} '%'</if>
                    <if test="param.roleName != null">and role_name = #{param.roleName}</if>
                </if>
            </where>
            group by user.user_id, user.password
        ) result
        <where>
            <if test="param != null">
                <if test="param.admissionNm != null">and lists like '%' #{param.admissionNm} '%' </if>
            </if>
        </where>
    </select>

    <select id="admission" resultType="com.humane.smps.dto.AccountDto">
        select distinct admission.admission_cd, admission.admission_nm from admission
        inner join exam on exam.admission_cd = exam.admission_cd order by admission.admission_cd, admission.admission_nm
    </select>

    <select id="accountDetail" resultType="com.humane.smps.dto.AccountDto">
        select admission.admission_cd, admission_nm, user_id
        from admission
        inner join user_admission on user_admission.admission_cd = admission.admission_cd
        <where>
            <if test="userId != null">
                and user_admission.user_id = #{userId}
            </if>
        </where>
    </select>

    <insert id="insertAdmission" parameterType="String" useGeneratedKeys="true" keyProperty="id">
        insert into user_admission values (null, #{admissionCd}, #{userId})

        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <delete id="deleteAdmission" parameterType="String">
        delete from user_admission where user_id = #{userId}
    </delete>

    <update id="modifyRole" parameterType="String">
        update user_role set user_role.role_name = #{roleName} where user_role.user_id = #{userId}
    </update>

    <update id="modifyUser" parameterType="String">
        update user set user.password = #{password} where user.user_id = #{userId}
    </update>

    <delete id="deleteRole" parameterType="String">
        delete from user_role where user_id = #{userId}
    </delete>

    <delete id="deleteAccount" parameterType="String">
        delete from user where user_id = #{userId}
    </delete>

    <insert id="addAccount" parameterType="String">
        insert into user values (#{userId}, #{password})
    </insert>

    <insert id="addRole" parameterType="String" useGeneratedKeys="true" keyProperty="id">
        insert into user_role values (null, #{roleName}, #{userId})

        <selectKey keyProperty="id" resultType="Long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <select id="idCheck" resultType="com.humane.smps.dto.AccountDto">
        select user_id from user
    </select>


    <select id="getExamInfo" resultType="com.humane.smps.dto.ExamInfoDto">
        SELECT exam.exam_cd
        , exam.adjust
        , exam.barcode_type
        , exam.exam_nm
        , exam.examinee_len
        , exam.is_absence
        , exam.is_closed_view
        , exam.is_horizontal
        , exam.is_mgr_auto
        , exam.is_move
        , exam.item_cnt
        , exam.keypad_type
        , exam.period
        , exam.print_content1
        , exam.print_content2
        , exam.print_sign
        , exam.print_title1
        , exam.print_title2
        , exam.scorer_cnt
        , exam.tot_score
        , exam.type_nm
        , exam.virt_no_digits
        , exam.virt_no_type
        , exam.fk_exam_cd
        , exam.admission_cd

        , admission.admission_nm

        , exam_hall_date.hall_date
        , exam_hall_date.virt_no_end
        , exam_hall_date.virt_no_start
        , exam_hall_date.hall_cd

        , hall.head_nm
        , hall.bldg_nm
        , hall.hall_nm
        FROM exam
        INNER JOIN admission ON admission.admission_cd = exam.admission_cd
        INNER JOIN exam_hall_date ON exam_hall_date.exam_cd = exam.exam_cd
        INNER JOIN hall ON hall.hall_cd = exam_hall_date.hall_cd
        <where>
            <if test="param != null">
                <if test="param.admissionNm">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.examCd">AND exam.exam_cd = #{param.examCd}</if>
                <if test="param.examNm">AND exam.exam_nm = #{param.examNm}</if>
            </if>
        </where>
    </select>

    <update id="modifyExamInfo">
        <if test="param != null">
            UPDATE exam
            <set>
                <if test="param.typeNm != null">type_nm = #{param.typeNm},</if>
                <if test="param.examNm != null">exam_nm = #{param.examNm},</if>
                <if test="param.period != null">period = #{param.period},</if>
                <if test="param.adjust != null">adjust = #{param.adjust},</if>
                <if test="param.barcodeType != null">barcode_type = #{param.barcodeType},</if>
                <if test="param.examineeLen != null">examinee_len = #{param.examineeLen},</if>
                <if test="param.isAbsence != null">is_absence = #{param.isAbsence},</if>
                <if test="param.isClosedView != null">is_closed_view = #{param.isClosedView},</if>
                <if test="param.isHorizontal != null">is_horizontal = #{param.isHorizontal},</if>
                <if test="param.isMgrAuto != null">is_mgr_auto = #{param.isMgrAuto},</if>
                <if test="param.isMove != null">is_move = #{param.isMove},</if>
                <if test="param.itemCnt != null">item_cnt = #{param.itemCnt},</if>
                <if test="param.keypadType != null">keypad_type = #{param.keypadType},</if>
                <if test="param.printTitle1 != null">print_title1 = #{param.printTitle1},</if>
                <if test="param.printContent1 != null">print_content1 = #{param.printContent1},</if>
                <if test="param.printTitle2 != null">print_title2 = #{param.printTitle2},</if>
                <if test="param.printContent2 != null">print_content2 = #{param.printContent2},</if>
                <if test="param.scorerCnt != null">scorer_cnt = #{param.scorerCnt},</if>
                <if test="param.totScore != null">tot_score = #{param.totScore},</if>
                <if test="param.virtNoDigits != null">virt_no_digits = #{param.virtNoDigits},</if>
                <if test="param.virtNoType != null">virt_no_type = #{param.virtNoType}</if>
            </set>
            WHERE exam_cd = #{param.examCd}
        </if>
    </update>

    <update id="modifyExamHallDateOfExamInfo">
        <if test="param != null">
            UPDATE exam_hall_date
            <set>
                <if test="param.hallDate">hall_date = #{param.hallDate},</if>
                <if test="param.virtNoStart != null">virt_no_start = #{param.virtNoStart},</if>
                <if test="param.virtNoEnd != null">virt_no_end = #{param.virtNoEnd}</if>
            </set>
            WHERE exam_cd = #{param.examCd}
        </if>
    </update>

    <select id="check" resultType="java.lang.Long">
        select count(*)
            from exam_map
            where group_nm is not null
    </select>

    <select id="order" resultType="com.humane.smps.dto.ExamineeDto">
select group_nm, group_order, debate_nm, debate_order
from exam_map
where group_nm is not null
    </select>
</mapper>
