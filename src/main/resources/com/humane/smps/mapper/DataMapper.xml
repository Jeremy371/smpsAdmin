<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.humane.smps.mapper.DataMapper">
    <select id="examinee" resultType="com.humane.smps.dto.ExamineeDto">
        SELECT
            admission.admission_nm,
            exam.type_nm,
            exam_map.hall_date AS exam_date,
            examinee.college_nm,
            examinee.dept_nm, examinee.major_nm, exam_map.group_nm,
            exam.exam_nm,
            hall.head_nm, hall.bldg_nm, hall.hall_nm,
            examinee.examinee_cd, examinee.examinee_nm,
            exam_map.virt_no,
            COUNT(score.scorer_nm)                                             AS scorer_cnt,
            ROUND(SUM(score.score01) / COUNT(score.scorer_nm),1)               AS avg_score01,
            ROUND(SUM(score.score02) / COUNT(score.scorer_nm),1)               AS avg_score02,
            ROUND(SUM(score.score03) / COUNT(score.scorer_nm),1)               AS avg_score03,
            ROUND(SUM(score.score04) / COUNT(score.scorer_nm),1)               AS avg_score04,
            ROUND(SUM(score.score05) / COUNT(score.scorer_nm),1)               AS avg_score05,
            ROUND(SUM(score.score06) / COUNT(score.scorer_nm),1)               AS avg_score06,
            ROUND(SUM(score.score07) / COUNT(score.scorer_nm),1)               AS avg_score07,
            ROUND(SUM(score.score08) / COUNT(score.scorer_nm),1)               AS avg_score08,
            ROUND(SUM(score.score09) / COUNT(score.scorer_nm),1)               AS avg_score09,
            ROUND(SUM(score.score10) / COUNT(score.scorer_nm),1)               AS avg_score10,

            SUM(score.score01) AS tot_score01,
            SUM(score.score02) AS tot_score02,
            SUM(score.score03) AS tot_score03,
            SUM(score.score04) AS tot_score04,
            SUM(score.score05) AS tot_score05,
            SUM(score.score06) AS tot_score06,
            SUM(score.score07) AS tot_score07,
            SUM(score.score08) AS tot_score08,
            SUM(score.score09) AS tot_score09,
            SUM(score.score10) AS tot_score10,

            SUM(score.score01 + score.score02 + score.score03 + score.score04 + score.score05
                + score.score06 + score.score07 + score.score08 + score.score09 + score.score10) AS total_score,
            CASE WHEN exam_map.virt_no IS NULL THEN FALSE
                  WHEN COUNT(score.scorer_nm) = 0 THEN FALSE
                  WHEN (SELECT COUNT(*) FROM score WHERE exam_map.exam_cd = score.exam_cd AND exam_map.virt_no = score.virt_no AND score.total_score = '결시') > 0 THEN FALSE
                  ELSE TRUE
            END                                                                AS is_attend,
            now() AS print_dttm
        FROM exam_map
            INNER JOIN exam ON exam_map.exam_cd = exam.exam_cd
            INNER JOIN hall ON exam_map.hall_cd = hall.hall_cd
            INNER JOIN examinee ON exam_map.examinee_cd = examinee.examinee_cd
            INNER JOIN admission ON exam.admission_cd = admission.admission_cd
            LEFT JOIN score ON exam_map.exam_cd = score.exam_cd AND exam_map.virt_no = score.virt_no
        <where>
            <if test="param != null">
                <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                <if test="param.groupNm != null">AND exam_map.group_nm = #{param.groupNm}</if>
                <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%' </if>
                <if test="param.isAttend != null">
                    <if test="param.isAttend == true">AND exam_map.virt_no IS NOT NULL AND score.score01 IS NOT NULL</if>
                    <if test="param.isAttend == false">AND exam_map.virt_no IS NULL AND score.score01 IS NULL</if>
                </if>
                <if test="param.examineeCd != null">AND examinee.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                <if test="param.examineeNm != null">AND examinee.examinee_nm LIKE '%' #{param.examineeNm} '%'</if>
                <if test="param.fromExamineeCd != null and param.toExamineeCd == null">AND examinee.examinee_cd = #{param.fromExamineeCd}</if>
                <if test="param.fromExamineeCd == null and param.toExamineeCd != null">AND examinee.examinee_cd = #{param.toExamineeCd}</if>
                <if test="param.fromExamineeCd != null and param.toExamineeCd != null">
                    AND examinee.examinee_cd BETWEEN #{param.fromExamineeCd} AND #{param.toExamineeCd}
                </if>
            </if>
        </where>
        GROUP BY
                admission.admission_nm
                , examinee.dept_nm
                , examinee.major_nm
                , exam.exam_nm
                , hall.head_nm
                , hall.bldg_nm
                , hall.hall_nm
                , exam_map.group_nm
                , exam_map.hall_date
                , examinee.examinee_cd
                , examinee.examinee_nm
    </select>

    <select id="scorer" resultType="com.humane.smps.dto.ScoreDto">
            SELECT
                admission.admission_nm,
                exam.type_nm,
                exam_map.hall_date AS exam_date,
                examinee.examinee_cd,
                examinee.examinee_nm,
                examinee.dept_nm,
                examinee.major_nm,
                hall.head_nm,
                hall.bldg_nm,
                hall.hall_nm,
                exam_map.virt_no,
                exam_map.group_nm,
                score.scorer_nm,
                score.score01,
                score.score02,
                score.score03,
                score.score04,
                score.score05,
                score.score06,
                score.score07,
                score.score08,
                score.score09,
                score.score10,
                score.total_score,
                score.score_dttm
            FROM exam_map
            INNER JOIN exam ON exam_map.exam_cd = exam.exam_cd
            INNER JOIN admission ON exam.admission_cd = admission.admission_cd
            INNER JOIN examinee ON exam_map.examinee_cd = examinee.examinee_cd
            INNER JOIN hall ON hall.hall_cd = exam_map.hall_cd
            LEFT JOIN score ON exam_map.exam_cd = score.exam_cd AND exam_map.virt_no = score.virt_no
        <where>
            <if test="param != null">
                <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                <if test="param.examNm != null">AND exam.exam_nm = #{param.examNm}</if>
                <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%'</if>
                <if test="param.scorerNm != null">score.scorer_nm LIKE '%' #{param.scorerNm} '%'</if>
            </if>
        </where>
    </select>

    <select id="getScorerCnt" resultType="java.lang.Long">
        SELECT max(scorer_cnt)
        FROM exam
    </select>

    <select id="getItemCnt" resultType="java.lang.Long">
        SELECT max(cnt)
        FROM (
                 SELECT count(*) AS cnt
                 FROM item
                 GROUP BY exam_cd
             ) a
    </select>
    <select id="examMap" resultType="com.humane.util.CamelMap">
        SELECT admission.admission_nm
            , exam.type_nm
            , examinee.dept_nm
            , examinee.major_nm
            , examinee.examinee_nm
            , exam_map.exam_cd
            , exam_map.virt_no
            , exam_map.hall_date as exam_date
            , date_format(scan_dttm,'%Y-%m-%d %H:%i:%s') as scan_dttm
            , exam_map.examinee_cd
            , exam_map.group_nm
            , hall.head_nm
            , hall.bldg_nm
            , hall.hall_nm
            , (
                SELECT
                          SUM(CASE WHEN score01 IS NOT NULL THEN score01 ELSE 0 END)
                        + SUM(CASE WHEN score02 IS NOT NULL THEN score02 ELSE 0 END)
                        + SUM(CASE WHEN score03 IS NOT NULL THEN score03 ELSE 0 END)
                        + SUM(CASE WHEN score04 IS NOT NULL THEN score04 ELSE 0 END)
                        + SUM(CASE WHEN score05 IS NOT NULL THEN score05 ELSE 0 END)
                        + SUM(CASE WHEN score06 IS NOT NULL THEN score06 ELSE 0 END)
                        + SUM(CASE WHEN score07 IS NOT NULL THEN score07 ELSE 0 END)
                        + SUM(CASE WHEN score08 IS NOT NULL THEN score08 ELSE 0 END)
                        + SUM(CASE WHEN score09 IS NOT NULL THEN score09 ELSE 0 END)
                        + SUM(CASE WHEN score10 IS NOT NULL THEN score10 ELSE 0 END)
                    FROM score WHERE score.virt_no = exam_map.virt_no
              ) AS total
        FROM exam_map
            INNER JOIN exam ON exam_map.exam_cd = exam.exam_cd
            INNER JOIN admission ON exam.admission_cd = admission.admission_cd
            INNER JOIN examinee ON exam_map.examinee_cd = examinee.examinee_cd
            INNER JOIN hall ON exam_map.hall_cd = hall.hall_cd
        <if test="param != null">
            <where>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                <if test="param.examineeNm != null">AND examinee.examinee_nm LIKE '%' #{param.examineeNm} '%'</if>
                <if test="param.examCd != null">AND exam_map.exam_cd = #{param.examCd}</if>
                <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%'</if>
                <if test="param.examineeCd != null">AND exam_map.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                <if test="param.groupNm != null">AND exam_map.group_nm = #{param.groupNm}</if>
                <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                <if test="param.userAdmissions != null">AND exam.admission_cd IN (${param.userAdmissions})</if>
                <if test="param.scorerNm != null">
                    AND exam_map.virt_no IN (
                      SELECT DISTINCT score.virt_no FROM score WHERE score.exam_cd = exam_map.exam_cd AND score.hall_cd = exam_map.hall_cd AND score.scorer_nm LIKE CONCAT('%', #{param.scorerNm}, '%')
                    )
                </if>
            </where>
        </if>
    </select>

    <select id="scorerH" resultType="com.humane.util.CamelMap">
        SELECT scorer_nm
              , score01, score02, score03, score04, score05, score06, score07, score08, score09, score10
              , date_format(score_dttm,'%Y-%m-%d %H:%i:%s') AS score_dttm
              , total_score
           FROM score A
        WHERE A.exam_cd = #{param.examCd}
          AND A.virt_no = #{param.virtNo}
        ORDER BY scorer_nm
    </select>

    <select id="examInfo" resultType="com.humane.smps.dto.ExamDto">
        SELECT exam.exam_cd, exam.exam_nm
        FROM exam
    </select>

    <select id="examDetail" resultType="com.humane.smps.dto.ExamDto">
        SELECT exam.exam_cd, exam.exam_nm,
		  MAX(exam_map.virt_no) AS last_virt_no
        , COUNT(exam_map.virt_no) AS virt_no_cnt, COUNT(exam_map.examinee_cd) AS examinee_cnt
        , (SELECT COUNT(*) FROM attend_map WHERE attend_map.attend_dttm IS NOT NULL AND attend_map.attend_cd = exam_map.exam_cd) AS attend_cnt
        FROM exam_map
        INNER JOIN exam ON exam.exam_cd = exam_map.exam_cd
        WHERE exam.exam_cd = #{examCd}
        GROUP BY exam.exam_cd, exam.exam_nm
    </select>

    <update id="fillVirtNo">
        <if test="param.examCd != null">
            UPDATE exam_map
            SET virt_no = #{param.lastVirtNo}, scan_dttm = NOW()
            WHERE exam_cd = #{param.examCd} AND virt_no IS NULL LIMIT 1
        </if>
    </update>

    <select id="paperToSmps" resultType="com.humane.smps.dto.EvalDto">
        SELECT DISTINCT attend_map.examinee_cd,
        (SELECT paper_cd FROM attend_paper WHERE attend_paper.attend_cd = attend_map.attend_cd
        AND attend_paper.examinee_cd = attend_map.examinee_cd AND attend_paper.paper_no = 1
        ORDER BY reg_dttm DESC LIMIT 1
        ) AS eval_cd,
        (SELECT exam_cd FROM exam_map WHERE attend_paper.examinee_cd = exam_map.examinee_cd) AS exam_cd
        FROM attend_map
        INNER JOIN attend_paper ON attend_paper.attend_cd = attend_map.attend_cd
        AND attend_paper.examinee_cd = attend_map.examinee_cd AND attend_paper.paper_no = 1
        <where>
            <if test="param.examCd != null">AND attend_map.attend_cd = #{param.examCd}</if>
        </where>
    </select>

    <update id="fillEvalCd">
        <if test="param.examCd != null">
            UPDATE exam_map
            SET eval_cd = #{param.evalCd}
            WHERE examinee_cd = #{param.examineeCd} AND exam_cd = #{param.examCd}
        </if>
    </update>

    <select id="fillList" resultType="com.humane.smps.dto.EvalDto">
        SELECT exam_map.examinee_cd, score.scorer_nm, exam_map.virt_no, exam_map.exam_cd, exam_map.eval_cd, score.score01,exam_map.hall_cd
        FROM attend_map
        INNER JOIN exam_map ON exam_map.examinee_cd = attend_map.examinee_cd
        INNER JOIN attend_paper ON attend_paper.paper_cd = exam_map.eval_cd
        LEFT JOIN score ON score.virt_no = exam_map.virt_no
        <where>
            AND score.scorer_nm IS NULL
            <if test="param.examCd != null">AND exam_map.exam_cd = #{param.examCd}</if>
        </where>
    </select>

    <select id="scorerList" resultType="com.humane.smps.dto.ScoreDto">
        SELECT DISTINCT score.scorer_nm
        FROM score
    </select>

    <select id="drawData" resultType="com.humane.util.CamelMap">
        select a.*
             , admission.admission_nm
             , exam.type_nm
             , exam_map.hall_date as exam_date
             , exam_map.eval_cd
             , examinee.dept_nm
             , examinee.major_nm
             , examinee.examinee_cd
             , examinee.examinee_nm
             , (select count(*) + 1
                   from (select exam_cd, hall_cd, virt_no, sum(total_score) as total from score group by exam_cd, hall_cd, virt_no) t
                  where t.total > a.total
                    and a.exam_cd = t.exam_cd
                 ) rank
                , (select count(*)
                   from (select exam_cd, hall_cd, virt_no, sum(total_score) as total from score group by exam_cd, hall_cd, virt_no) t
                  where t.total = a.total
                    and a.exam_cd = t.exam_cd
                 ) cnt
          from (select exam_cd, hall_cd, virt_no, sum(total_score) as total from score group by exam_cd, hall_cd, virt_no order by total desc) a
         inner join exam_map on a.exam_cd = exam_map.exam_cd and a.virt_no = exam_map.virt_no
         inner join exam on a.exam_cd = exam.exam_cd
         inner join admission on exam.admission_cd = admission.admission_cd
         inner join examinee on exam_map.examinee_cd = examinee.examinee_cd
         inner join hall on exam_map.hall_cd = hall.hall_cd
        <if test="param != null">
            <where>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                <if test="param.examineeNm != null">AND examinee.examinee_nm LIKE '%' #{param.examineeNm} '%'</if>
                <if test="param.examCd != null">AND exam_map.exam_cd = #{param.examCd}</if>
                <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%'</if>
                <if test="param.examineeCd != null">AND exam_map.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                <if test="param.groupNm != null">AND exam_map.group_nm = #{param.groupNm}</if>
                <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                <if test="param.userAdmissions != null">AND exam.admission_cd IN (${param.userAdmissions})</if>
            </where>
        </if>
    </select>

    <insert id="fillScore" parameterType="com.humane.smps.dto.EvalDto">
        INSERT INTO score(score01, score_dttm, score_seq, scorer_nm, sheet_no, total_score, virt_no, exam_cd, hall_cd)
        VALUES (#{param.score01}, NOW(), '1', #{param.scorerNm}, '1', #{param.score01}, #{param.virtNo}, #{param.examCd}, #{param.hallCd})
    </insert>
</mapper>