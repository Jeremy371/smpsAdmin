<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.humane.smps.mapper.DataMapper">
    <select id="examinee" resultType="com.humane.smps.dto.ExamineeDto">
        SELECT
            admission.admission_nm,
            exam.type_nm,
            exam_map.hall_date AS exam_date,
            examinee.college_nm, examinee.exm_adm_nm,
            examinee.dept_nm, examinee.major_nm, exam_map.group_nm,
            exam.exam_nm,
            hall.head_nm, hall.bldg_nm, hall.hall_nm,
            examinee.examinee_cd, examinee.examinee_nm,
            exam_map.virt_no,
            exam_map.scan_dttm,
            COUNT(score.scorer_nm)                                             AS scorer_cnt,
            ROUND(SUM(score.score01) / COUNT(score.scorer_nm),1)               AS avg_score01,
            ROUND(SUM(score.score02) / COUNT(score.scorer_nm),1)               AS avg_score02,
            ROUND(SUM(score.score03) / COUNT(score.scorer_nm),1)               AS avg_score03,
            ROUND(SUM(score.score04) / COUNT(score.scorer_nm),1)               AS avg_score04,
            ROUND(SUM(score.score05) / COUNT(score.scorer_nm),1)               AS avg_score05,
            ROUND(SUM(score.score06) / COUNT(score.scorer_nm),1)               AS avg_score06,
            ROUND(SUM(score.score07) / COUNT(score.scorer_nm),1)               AS avg_score07,
            ROUND(SUM(score.score08) / COUNT(score.scorer_nm),1)               AS avg_score08,
            ROUND(SUM(score.score09) / COUNT(score.scorer_nm),1)               AS avg_score09,
            ROUND(SUM(score.score10) / COUNT(score.scorer_nm),1)               AS avg_score10,
            SUM(score.score01) AS tot_score01,
            SUM(score.score02) AS tot_score02,
            SUM(score.score03) AS tot_score03,
            SUM(score.score04) AS tot_score04,
            SUM(score.score05) AS tot_score05,
            SUM(score.score06) AS tot_score06,
            SUM(score.score07) AS tot_score07,
            SUM(score.score08) AS tot_score08,
            SUM(score.score09) AS tot_score09,
            SUM(score.score10) AS tot_score10,
            ROUND(SUM(score.score01 + score.score02 + score.score03 + score.score04 + score.score05 + score.score06 + score.score07 + score.score08 + score.score09 + score.score10), 1) AS total_score,
            CASE WHEN exam_map.virt_no IS NULL THEN FALSE
                  WHEN COUNT(score.scorer_nm) = 0 THEN FALSE
                  WHEN (SELECT COUNT(*) FROM score WHERE exam_map.exam_cd = score.exam_cd AND exam_map.virt_no = score.virt_no AND score.total_score = '결시') > 0 THEN FALSE
                  ELSE TRUE
            END                                                                AS is_attend,
            now() AS print_dttm
        FROM exam_map
            INNER JOIN exam ON exam_map.exam_cd = exam.exam_cd
            INNER JOIN hall ON exam_map.hall_cd = hall.hall_cd
            INNER JOIN examinee ON exam_map.examinee_cd = examinee.examinee_cd
            INNER JOIN admission ON exam.admission_cd = admission.admission_cd
            LEFT JOIN (select score.exam_cd, virt_no, scorer_nm, total_score
                              , if(score01 REGEXP '^-?[0-9\.]+$' > 0, score01 + exam.adjust, score01) as score01
                              , if(score02 REGEXP '^-?[0-9\.]+$' > 0, score02 + exam.adjust, score02) as score02
                              , if(score03 REGEXP '^-?[0-9\.]+$' > 0, score03 + exam.adjust, score03) as score03
                              , if(score04 REGEXP '^-?[0-9\.]+$' > 0, score04 + exam.adjust, score04) as score04
                              , if(score05 REGEXP '^-?[0-9\.]+$' > 0, score05 + exam.adjust, score05) as score05
                              , if(score06 REGEXP '^-?[0-9\.]+$' > 0, score06 + exam.adjust, score06) as score06
                              , if(score07 REGEXP '^-?[0-9\.]+$' > 0, score07 + exam.adjust, score07) as score07
                              , if(score08 REGEXP '^-?[0-9\.]+$' > 0, score08 + exam.adjust, score08) as score08
                              , if(score09 REGEXP '^-?[0-9\.]+$' > 0, score09 + exam.adjust, score09) as score09
                              , if(score10 REGEXP '^-?[0-9\.]+$' > 0, score10 + exam.adjust, score10) as score10
                           from score
                          inner join exam on score.exam_cd = exam.exam_cd
                        ) as score ON exam_map.exam_cd = score.exam_cd AND exam_map.virt_no = score.virt_no
        <where>
            <if test="param != null">
                <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                <if test="param.groupNm != null">AND exam_map.group_nm = #{param.groupNm}</if>
                <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%' </if>
                <if test="param.isVirtNo != null">
                    <if test="param.isVirtNo == true">AND exam_map.virt_no IS NOT NULL</if>
                    <if test="param.isVirtNo == false">AND exam_map.virt_no IS NULL</if>
                </if>
                <if test="param.isAttend != null">
                    <if test="param.isAttend == true">AND exam_map.virt_no IS NOT NULL AND score.score01 IS NOT NULL</if>
                    <if test="param.isAttend == false">AND exam_map.virt_no IS NULL AND score.score01 IS NULL</if>
                </if>
                <if test="param.examineeCd != null">AND examinee.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                <if test="param.examineeNm != null">AND examinee.examinee_nm LIKE '%' #{param.examineeNm} '%'</if>
                <if test="param.fromExamineeCd != null and param.toExamineeCd == null">AND examinee.examinee_cd = #{param.fromExamineeCd}</if>
                <if test="param.fromExamineeCd == null and param.toExamineeCd != null">AND examinee.examinee_cd = #{param.toExamineeCd}</if>
                <if test="param.fromExamineeCd != null and param.toExamineeCd != null">AND examinee.examinee_cd BETWEEN #{param.fromExamineeCd} AND #{param.toExamineeCd}</if>
            </if>
        </where>
        GROUP BY
                admission.admission_nm
                , examinee.dept_nm
                , examinee.major_nm
                , exam.exam_nm
                , hall.head_nm
                , hall.bldg_nm
                , hall.hall_nm
                , exam_map.group_nm
                , exam_map.hall_date
                , examinee.examinee_cd
                , examinee.examinee_nm
    </select>

    <!-- 가번호 배정 명부 -->
    <select id="virtNoDoc" resultType="com.humane.smps.dto.ExamineeDto">
        SELECT @rownum := @rownum+1 AS row_num, a.*
        FROM(
                SELECT
                (SELECT @rownum :=0),
                admission.admission_nm,
                exam.type_nm,
                exam_map.hall_date AS exam_date,
                examinee.college_nm, examinee.exm_adm_nm,
                examinee.dept_nm, examinee.major_nm,
                exam.exam_nm,
                hall.head_nm, hall.bldg_nm, hall.hall_nm,
                examinee.examinee_cd, examinee.examinee_nm,
                exam_map.virt_no,
                exam_map.group_nm
                <if test="param != null">
                    <if test="param.mainTitle != null">, #{param.mainTitle} AS mainTitle </if>
                    <if test="param.subTitle != null">, #{param.subTitle} AS subTitle </if>
                </if>
                FROM exam_map
                INNER JOIN exam ON exam_map.exam_cd = exam.exam_cd
                INNER JOIN hall ON exam_map.hall_cd = hall.hall_cd
                INNER JOIN examinee ON exam_map.examinee_cd = examinee.examinee_cd
                INNER JOIN admission ON exam.admission_cd = admission.admission_cd
                <where>
                    AND exam_map.virt_no IS NOT NULL
                    <if test="param != null">
                        <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                        <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                        <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                        <if test="param.examNm != null">AND exam.exam_nm = #{param.examNm}</if>
                        <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                        <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                        <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                        <if test="param.groupNm != null">AND exam_map.group_nm = #{param.groupNm}</if>
                        <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                        <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                        <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                        <if test="param.groupNm != null">AND exam_map.group_nm = #{param.groupNm}</if>
                        <if test="param.virtNo != null">AND exam_map.virt_no = #{param.virtNo} '%'</if>
                        <if test="param.examineeCd != null">AND examinee.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                        <if test="param.examineeNm != null">AND examinee.examinee_nm LIKE '%' #{param.examineeNm} '%'</if>
                    </if>
                </where>
                GROUP BY
                admission.admission_cd
                , exam.exam_cd
                , examinee.examinee_cd
                , examinee.examinee_nm
                , exam_map.group_nm
                ORDER BY
                exam_map.virt_no
        ) a
    </select>

    <!-- 경북대용 -->
    <select id="knuScorer" resultType="com.humane.smps.dto.ScoreDto">
          select '면접' as admission_nm,
               examinee.examinee_cd,
               examinee.exm_adm_nm,
               examinee.dept_nm,
               examinee.examinee_nm,
               examinee.birth,
               hall.bldg_nm,
               hall.hall_nm,
               c.scorer_nm,
               score01, if(score01 = '결시', '결시', grade01) as grade01,
               score02, if(score01 = '결시', '결시', grade02) as grade02,
               score03, if(score01 = '결시', '결시', grade03) as grade03,
               score04, if(score01 = '결시', '결시', grade04) as grade04,
               if(grade01 is null, '결시', grade01 + grade02 + grade03 + grade04) as total_score
                         -- nullif(CONVERT(, VARCHAR(50)), '결시') as total_score
          from ( select exam_cd, virt_no, scorer_nm
                         , min(if(item_no = 1, score, null)) as score01
                          , min(if(item_no = 2, score, null)) as score02
                          , min(if(item_no = 3, score, null)) as score03
                          , min(if(item_no = 4, score, null)) as score04
                          , min(if(item_no = 1, grade, null)) as grade01
                          , min(if(item_no = 2, grade, null)) as grade02
                          , min(if(item_no = 3, grade, null)) as grade03
                          , min(if(item_no = 4, grade, null)) as grade04
                      from (
                    select b.exam_cd, b.virt_no, b.scorer_nm, b.item_no, b.score
                         , (select max_score from devi where devi.fk_devi_cd = b.devi_cd and b.score = devi.devi_nm) as grade
                      from (
                                select a.*, devi_cd
                                  from (
                                            select exam_cd, virt_no, scorer_nm, '1' as item_no, score01 as score from score union all
                                            select exam_cd, virt_no, scorer_nm, '2' as item_no, score02 as score from score union all
                                            select exam_cd, virt_no, scorer_nm, '3' as item_no, score03 as score from score union all
                                            select exam_cd, virt_no, scorer_nm, '4' as item_no, score04 as score from score
                                       ) a
                                 inner join item on a.exam_cd = item.exam_cd and a.item_no = item.item_no
                                 ) b) c
                     group by exam_cd, virt_no, scorer_nm) c
         inner join exam_map on c.exam_cd = exam_map.exam_cd and c.virt_no = exam_map.virt_no
         inner join examinee on exam_map.examinee_cd = examinee.examinee_cd
         inner join exam on exam_map.exam_cd = exam.exam_cd
         inner join hall on exam_map.hall_cd = hall.hall_cd
         order by exm_adm_nm, examinee_cd
    </select>

    <!-- 경북대용 -->
    <select id="absentList" resultType="com.humane.smps.dto.ExamineeDto">
        select examinee.dept_nm, examinee.exm_adm_nm, examinee.examinee_cd, examinee.examinee_nm
        from exam_map
        inner join exam on exam.exam_cd = exam_map.exam_cd
        inner join examinee on examinee.examinee_cd = exam_map.examinee_cd
        left join score on score.exam_cd = exam.exam_cd AND score.virt_no = exam_map.virt_no
        where score.total_score = '결시'
        group by examinee.dept_nm, examinee.exm_adm_nm, examinee.examinee_cd, examinee.examinee_nm
    </select>

    <select id="scorer" resultType="com.humane.smps.dto.ScoreDto">
            SELECT
                admission.admission_nm
                , exam.type_nm
                , exam_map.hall_date AS exam_date
                , examinee.examinee_cd
                , examinee.examinee_nm
                , examinee.dept_nm
                , examinee.major_nm
                , hall.head_nm
                , hall.bldg_nm
                , hall.hall_nm
                , exam_map.virt_no
                , exam_map.eval_cd
                , exam_map.group_nm
                , score.scorer_nm
                , score01
                , score02
                , score03
                , score04
                , score05
                , score06
                , score07
                , score08
                , score09
                , score10
                , if(score01 REGEXP '^[A-Z\.]+$' > 0
                    , total_score
                    , case when score01 = exam.absent_value then exam.absent_value else round(ifnull(score01, 0) + ifnull(score02, 0) + ifnull(score03, 0) + ifnull(score04, 0) + ifnull(score05, 0)
                    + ifnull(score06, 0) + ifnull(score07, 0) + ifnull(score08, 0) + ifnull(score09, 0) + ifnull(score10, 0), 1) end
                    ) as total_score
                , score.score_dttm
            FROM exam_map
            INNER JOIN exam ON exam_map.exam_cd = exam.exam_cd
            INNER JOIN admission ON exam.admission_cd = admission.admission_cd
            INNER JOIN examinee ON exam_map.examinee_cd = examinee.examinee_cd
            INNER JOIN hall ON hall.hall_cd = exam_map.hall_cd
            LEFT JOIN (select score.exam_cd, virt_no, scorer_nm, total_score, score_dttm
                            , if(score01 REGEXP '^-?[0-9\.]+$' > 0, case when score01 != exam.absent_value then score01 + exam.adjust else score01 end, score01) as score01
                            , if(score02 REGEXP '^-?[0-9\.]+$' > 0, case when score02 != exam.absent_value then score02 + exam.adjust else score02 end, score02) as score02
                            , if(score03 REGEXP '^-?[0-9\.]+$' > 0, case when score03 != exam.absent_value then score03 + exam.adjust else score03 end, score03) as score03
                            , if(score04 REGEXP '^-?[0-9\.]+$' > 0, case when score04 != exam.absent_value then score04 + exam.adjust else score04 end, score04) as score04
                            , if(score05 REGEXP '^-?[0-9\.]+$' > 0, case when score05 != exam.absent_value then score05 + exam.adjust else score05 end, score05) as score05
                            , if(score06 REGEXP '^-?[0-9\.]+$' > 0, case when score06 != exam.absent_value then score06 + exam.adjust else score06 end, score06) as score06
                            , if(score07 REGEXP '^-?[0-9\.]+$' > 0, case when score07 != exam.absent_value then score07 + exam.adjust else score07 end, score07) as score07
                            , if(score08 REGEXP '^-?[0-9\.]+$' > 0, case when score08 != exam.absent_value then score08 + exam.adjust else score08 end, score08) as score08
                            , if(score09 REGEXP '^-?[0-9\.]+$' > 0, case when score09 != exam.absent_value then score09 + exam.adjust else score09 end, score09) as score09
                            , if(score10 REGEXP '^-?[0-9\.]+$' > 0, case when score10 != exam.absent_value then score10 + exam.adjust else score10 end, score10) as score10
                            from score
                            inner join exam on score.exam_cd = exam.exam_cd) as score
                        ON exam_map.exam_cd = score.exam_cd AND exam_map.virt_no = score.virt_no
        <where>
            <if test="param != null">
                <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                <if test="param.examNm != null">AND exam.exam_nm = #{param.examNm}</if>
                <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%'</if>
                <if test="param.scorerNm != null">score.scorer_nm LIKE '%' #{param.scorerNm} '%'</if>
            </if>
        </where>
    </select>

    <select id="getScorerCnt" resultType="java.lang.Long">
        SELECT max(scorer_cnt)
        FROM exam
    </select>

    <select id="getItemCnt" resultType="java.lang.Long">
        SELECT max(cnt)
        FROM (
                 SELECT count(*) AS cnt
                 FROM item
                 GROUP BY exam_cd
             ) a
    </select>

    <select id="examMap" resultType="com.humane.util.CamelMap">
        SELECT admission.admission_nm
        , exam.type_nm
        , case when exam.absent_value is null then '0' else exam.absent_value end as absent_value
        , examinee.dept_nm
        , examinee.major_nm
        , examinee.examinee_nm
        , exam_map.exam_cd
        , exam_map.virt_no
        , exam_map.eval_cd
        , exam_map.hall_date as exam_date
        , date_format(scan_dttm,'%Y-%m-%d %H:%i:%s') as scan_dttm
        , exam_map.examinee_cd
        , exam_map.group_nm
        , hall.head_nm
        , hall.bldg_nm
        , hall.hall_nm
        , (SELECT SUM(
                    IF(score01 IS NOT NULL, 1, 0)
                    + IF(score02 IS NOT NULL, 1, 0)
                    + IF(score03 IS NOT NULL, 1, 0)
                    + IF(score04 IS NOT NULL, 1, 0)
                    + IF(score05 IS NOT NULL, 1, 0)
                    + IF(score06 IS NOT NULL, 1, 0)
                    + IF(score07 IS NOT NULL, 1, 0)
                    )
            FROM score
            WHERE exam_map.virt_no = score.virt_no
          ) AS scored_cnt -- 평가자별 채점항목 수 검증용
        FROM exam_map
        INNER JOIN exam ON exam_map.exam_cd = exam.exam_cd AND exam.fk_exam_cd IS NULL
        INNER JOIN admission ON exam.admission_cd = admission.admission_cd
        INNER JOIN examinee ON exam_map.examinee_cd = examinee.examinee_cd
        INNER JOIN hall ON exam_map.hall_cd = hall.hall_cd
        <if test="param != null">
            <where>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                <if test="param.examineeNm != null">AND examinee.examinee_nm LIKE '%' #{param.examineeNm} '%'</if>
                <if test="param.examCd != null">AND exam_map.exam_cd = #{param.examCd}</if>
                <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%'</if>
                <if test="param.examineeCd != null">AND exam_map.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                <if test="param.groupNm != null">AND exam_map.group_nm = #{param.groupNm}</if>
                <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                <if test="param.isVirtNo != null">
                    <if test="param.isVirtNo == true">AND exam_map.virt_no IS NOT NULL</if>
                    <if test="param.isVirtNo == false">AND exam_map.virt_no IS NULL</if>
                </if>
                <if test="param.userAdmissions != null">AND exam.admission_cd IN (${param.userAdmissions})</if>
                <if test="param.scorerNm != null">
                    AND exam_map.virt_no IN (
                    SELECT DISTINCT score.virt_no FROM score WHERE score.exam_cd = exam_map.exam_cd AND score.hall_cd = exam_map.hall_cd AND score.scorer_nm LIKE CONCAT('%', #{param.scorerNm}, '%')
                    )
                </if>
            </where>
        </if>
    </select>

    <select id="scorerH" resultType="com.humane.util.CamelMap">
        SELECT scorer_nm, score01, score02, score03, score04, score05, score06, score07, score08, score09, score10
           --   , round(ifnull(score01, 0) + ifnull(score02, 0) + ifnull(score03, 0) + ifnull(score04, 0) + ifnull(score05, 0)
           --     + ifnull(score06, 0) + ifnull(score07, 0) + ifnull(score08, 0) + ifnull(score09, 0) + ifnull(score10, 0), 1) as total_score_law
           --   , total_score as total_score
              , if(score01 REGEXP '^[A-Z\.]+$' > 0
                  , total_score
                  , round(ifnull(score01, 0) + ifnull(score02, 0) + ifnull(score03, 0) + ifnull(score04, 0) + ifnull(score05, 0)
                        + ifnull(score06, 0) + ifnull(score07, 0) + ifnull(score08, 0) + ifnull(score09, 0) + ifnull(score10, 0), 1)
                  ) as total_score
              , date_format(score_dttm,'%Y-%m-%d %H:%i:%s') AS score_dttm
           FROM ( SELECT score.exam_cd, virt_no, scorer_nm, score_dttm, total_score
                      , if(score01 REGEXP '^-?[0-9\.]+$' > 0, score01 + exam.adjust, score01) as score01
                      , if(score02 REGEXP '^-?[0-9\.]+$' > 0, score02 + exam.adjust, score02) as score02
                      , if(score03 REGEXP '^-?[0-9\.]+$' > 0, score03 + exam.adjust, score03) as score03
                      , if(score04 REGEXP '^-?[0-9\.]+$' > 0, score04 + exam.adjust, score04) as score04
                      , if(score05 REGEXP '^-?[0-9\.]+$' > 0, score05 + exam.adjust, score05) as score05
                      , if(score06 REGEXP '^-?[0-9\.]+$' > 0, score06 + exam.adjust, score06) as score06
                      , if(score07 REGEXP '^-?[0-9\.]+$' > 0, score07 + exam.adjust, score07) as score07
                      , if(score08 REGEXP '^-?[0-9\.]+$' > 0, score08 + exam.adjust, score08) as score08
                      , if(score09 REGEXP '^-?[0-9\.]+$' > 0, score09 + exam.adjust, score09) as score09
                      , if(score10 REGEXP '^-?[0-9\.]+$' > 0, score10 + exam.adjust, score10) as score10
              FROM score inner join exam on score.exam_cd = exam.exam_cd) as score
          INNER JOIN exam ON score.exam_cd = exam.exam_cd
        WHERE score.exam_cd = #{param.examCd}
          AND score.virt_no = #{param.virtNo}
        ORDER BY score.scorer_nm
    </select>

    <select id="examDetail" resultType="com.humane.smps.dto.ExamDto">
        SELECT exam.exam_cd, exam.exam_nm, exam_map.hall_cd,
		  MAX(exam_map.virt_no) AS last_virt_no
        , COUNT(exam_map.virt_no) AS virt_no_cnt, COUNT(exam_map.examinee_cd) AS examinee_cnt
        , (SELECT COUNT(*) FROM attend_map WHERE attend_map.attend_dttm IS NOT NULL AND attend_map.attend_cd = exam_map.exam_cd) AS attend_cnt
        FROM exam_map
        INNER JOIN exam ON exam.exam_cd = exam_map.exam_cd
        WHERE exam.exam_cd = #{examCd}
        GROUP BY exam.exam_cd, exam.exam_nm, exam_map.hall_cd
    </select>

    <update id="fillVirtNo">
        <if test="param.examCd != null">
            UPDATE exam_map
            SET virt_no = #{param.lastVirtNo}, scan_dttm = NOW()
            WHERE exam_cd = #{param.examCd} AND virt_no IS NULL LIMIT 1
        </if>
    </update>

    <select id="paperToSmps" resultType="com.humane.smps.dto.EvalDto">
        SELECT DISTINCT attend_map.examinee_cd,
        (SELECT paper_cd FROM attend_paper WHERE attend_paper.attend_cd = attend_map.attend_cd
        AND attend_paper.examinee_cd = attend_map.examinee_cd -- AND attend_paper.paper_no = 1
        ORDER BY reg_dttm DESC LIMIT 1
        ) AS eval_cd,
        (SELECT exam_cd FROM exam_map WHERE attend_paper.examinee_cd = exam_map.examinee_cd) AS exam_cd
        FROM attend_map
        INNER JOIN attend_paper ON attend_paper.attend_cd = attend_map.attend_cd
        AND attend_paper.examinee_cd = attend_map.examinee_cd -- AND attend_paper.paper_no = 1
        <where>
            <if test="param.examCd != null">AND attend_map.attend_cd = #{param.examCd}</if>
        </where>
    </select>

    <update id="fillEvalCd">
        <if test="param.examCd != null">
            UPDATE exam_map
            SET eval_cd = #{param.evalCd}
            WHERE examinee_cd = #{param.examineeCd} AND exam_cd = #{param.examCd}
        </if>
    </update>

    <select id="fillList" resultType="com.humane.smps.dto.EvalDto">
        SELECT exam_map.examinee_cd, score.scorer_nm, exam_map.virt_no, exam_map.exam_cd, exam_map.eval_cd, exam_map.hall_cd
        FROM attend_map
        INNER JOIN exam_map ON exam_map.examinee_cd = attend_map.examinee_cd
        INNER JOIN attend_paper ON attend_paper.paper_cd = exam_map.eval_cd
        LEFT JOIN score ON score.virt_no = exam_map.virt_no
        <where>
            AND score.scorer_nm IS NULL
            <if test="param.examCd != null">AND exam_map.exam_cd = #{param.examCd}</if>
        </where>
    </select>

    <select id="scorerList" resultType="com.humane.smps.dto.ScoreDto">
        SELECT DISTINCT score.scorer_nm
        FROM score
    </select>

    <!-- 채점자별 상세(가로) 1개 쿼리로, 결시를 의미하는 값은 exam.absent_value -->
    <select id="scoredH" resultType="com.humane.util.CamelMap">
       SELECT distinct admission.admission_nm, exam.type_nm, e.hall_date as exam_date
                        , e.dept_nm, e.major_nm, e.examinee_cd, e.examinee_nm, e.group_nm
                        , e.virt_no, e.total
                        , e.scorer_nm1, e.total_score1, e.score1s1, e.score1s2, e.score1s3, e.score1s4, e.score1s5
                        , e.scorer_nm2, e.total_score2, e.score2s1, e.score2s2, e.score2s3, e.score2s4, e.score2s5
                        , e.scorer_nm3, e.total_score3, e.score3s1, e.score3s2, e.score3s3, e.score3s4, e.score3s5
                        , e.scorer_nm4, e.total_score4, e.score4s1, e.score4s2, e.score4s3, e.score4s4, e.score4s5
                        , e.scorer_nm5, e.total_score5, e.score5s1, e.score5s2, e.score5s3, e.score5s4, e.score5s5
		          FROM ( SELECT exam_hall_date.exam_cd, exam_hall_date.hall_cd, exam.scorer_cnt, exam_hall_date.hall_date, d.virt_no
                            , if(scored_cnt1 != 0, 1, 0) + if(scored_cnt2 != 0, 1, 0) + if(scored_cnt3 != 0, 1, 0) + if(scored_cnt4 != 0, 1, 0) + if(scored_cnt5 != 0, 1, 0) AS scored_cnt
                            , scorer_nm1, case when total_score1 = exam.absent_value then total_score1 else cast(total_score1 AS unsigned) end AS total_score1
                            , scorer_nm2, case when total_score2 = exam.absent_value then total_score2 else cast(total_score2 AS unsigned) end AS total_score2
                            , scorer_nm3, case when total_score3 = exam.absent_value then total_score3 else cast(total_score3 AS unsigned) end AS total_score3
                            , scorer_nm4, case when total_score4 = exam.absent_value then total_score4 else cast(total_score4 AS unsigned) end AS total_score4
                            , scorer_nm5, case when total_score5 = exam.absent_value then total_score5 else cast(total_score5 AS unsigned) end AS total_score5
                             , case when total_score1 = exam.absent_value or total_score2 = exam.absent_value or total_score3 = exam.absent_value or total_score4 = exam.absent_value or total_score5 = exam.absent_value  then exam.absent_value
                                else(
                                    (case when total_score1 is not null then cast(total_score1 AS unsigned) else 0 end)
                                  + (case when total_score2 is not null then cast(total_score2 AS unsigned) else 0 end)
                                  + (case when total_score3 is not null then cast(total_score3 AS unsigned) else 0 end)
                                  + (case when total_score4 is not null then cast(total_score4 AS unsigned) else 0 end)
                                  + (case when total_score5 is not null then cast(total_score5 AS unsigned) else 0 end)
                                ) end as total
                            , score1S1, score1S2, score1S3, score1S4, score1S5
							, score2S1, score2S2, score2S3, score2S4, score2S5
                            , score3S1, score3S2, score3S3, score3S4, score3S5
							, score4S1, score4S2, score4S3, score4S4, score4S5
                            , score5S1, score5S2, score5S3, score5S4, score5S5
                            , d.examinee_cd, d.examinee_nm, d.dept_nm, d.major_nm, d.group_nm
                        FROM exam_hall_date
                        INNER JOIN exam on exam.exam_cd = exam_hall_date.exam_cd
                        LEFT JOIN (SELECT exam_cd, hall_cd, hall_date, virt_no, examinee_cd, examinee_nm, dept_nm, major_nm, group_nm
                                    , MIN(if(rn = 1, scorer_nm, NULL)) AS scorer_nm1, MIN(if(rn = 1, total_score, NULL)) AS total_score1
                                    , MIN(if(rn = 2, scorer_nm, NULL)) AS scorer_nm2, MIN(if(rn = 2, total_score, NULL)) AS total_score2
                                    , MIN(if(rn = 3, scorer_nm, NULL)) AS scorer_nm3, MIN(if(rn = 3, total_score, NULL)) AS total_score3
                                    , MIN(if(rn = 4, scorer_nm, NULL)) AS scorer_nm4, MIN(if(rn = 4, total_score, NULL)) AS total_score4
                                    , MIN(if(rn = 5, scorer_nm, NULL)) AS scorer_nm5, MIN(if(rn = 5, total_score, NULL)) AS total_score5

                                    , MIN(if(rn = 1, cnt, NULL)) AS scored_cnt1, MIN(if(rn = 2, cnt, NULL)) AS scored_cnt2
                                    , MIN(if(rn = 3, cnt, NULL)) AS scored_cnt3, MIN(if(rn = 4, cnt, NULL)) AS scored_cnt4
                                    , MIN(if(rn = 5, cnt, NULL)) AS scored_cnt5

                                    , MIN(if(rn = 1, score01, NULL)) AS score1S1, MIN(if(rn = 1, score02, NULL)) AS score1S2, MIN(if(rn = 1, score03, NULL)) AS score1S3, MIN(if(rn = 1, score04, NULL)) AS score1S4, MIN(if(rn = 1, score05, NULL)) AS score1S5
                                    , MIN(if(rn = 2, score01, NULL)) AS score2S1, MIN(if(rn = 2, score02, NULL)) AS score2S2, MIN(if(rn = 2, score03, NULL)) AS score2S3, MIN(if(rn = 2, score04, NULL)) AS score2S4, MIN(if(rn = 2, score05, NULL)) AS score2S5
                                    , MIN(if(rn = 3, score01, NULL)) AS score3S1, MIN(if(rn = 3, score02, NULL)) AS score3S2, MIN(if(rn = 3, score03, NULL)) AS score3S3, MIN(if(rn = 3, score04, NULL)) AS score3S4, MIN(if(rn = 3, score05, NULL)) AS score3S5
                                    , MIN(if(rn = 4, score01, NULL)) AS score4S1, MIN(if(rn = 4, score02, NULL)) AS score4S2, MIN(if(rn = 4, score03, NULL)) AS score4S3, MIN(if(rn = 4, score04, NULL)) AS score4S4, MIN(if(rn = 4, score05, NULL)) AS score4S5
                                    , MIN(if(rn = 5, score01, NULL)) AS score5S1, MIN(if(rn = 5, score02, NULL)) AS score5S2, MIN(if(rn = 5, score03, NULL)) AS score5S3, MIN(if(rn = 5, score04, NULL)) AS score5S4, MIN(if(rn = 5, score05, NULL)) AS score5S5
                                    FROM ( SELECT a.*
                                            , CASE WHEN @prev_exam_cd = exam_cd AND @prev_hall_cd = hall_cd AND @prev_hall_date = hall_date AND @prev_virt_no = virt_no then @rownum := @rownum + 1 else @rownum := 1 end AS rn
                                            , @prev_exam_cd := exam_cd
                                            , @prev_hall_cd := hall_cd
                                            , @prev_hall_date := hall_date
                                            , @prev_virt_no := virt_no
                                            FROM (SELECT exam_map.hall_date, score.exam_cd, score.hall_cd, score.virt_no, score.scorer_nm, score.total_score
                                            					, case when score.score01 != exam.absent_value then score01 else score01 end as score01
                                                                , case when score.score02 != exam.absent_value then score02 else score02 end as score02
                                                                , case when score.score03 != exam.absent_value then score03 else score03 end as score03
                                                                , case when score.score04 != exam.absent_value then score04 else score04 end as score04
                                                                , case when score.score05 != exam.absent_value then score05 else score05 end as score05
                                                                , examinee.dept_nm, examinee.major_nm, examinee.examinee_cd, examinee.examinee_nm, exam_map.group_nm
                                                , (SELECT count(*) FROM score f WHERE f.virt_no = score.virt_no GROUP BY virt_no) AS cnt
                                                    FROM score
                                                    INNER JOIN exam ON exam.exam_cd = score.exam_cd
                                                    INNER JOIN exam_map ON exam_map.exam_cd = score.exam_cd AND exam_map.hall_cd = score.hall_cd AND exam_map.virt_no = score.virt_no
                                                    INNER JOIN examinee ON examinee.examinee_cd = exam_map.examinee_cd
                                                    GROUP BY exam_map.hall_date,  score.exam_cd, score.hall_cd, score.virt_no, score.scorer_nm, score.total_score
                                                    ORDER BY exam_map.hall_date, exam_cd, hall_cd, virt_no, scorer_nm) a
                                                    , (SELECT @rownum := 1, @prev_exam_cd := '', @prev_hall_cd := '', @prev_hall_date := '', @prev_virt_no := '') b
                                                  )c
                                            GROUP BY exam_cd, hall_cd, hall_date, virt_no) d on exam_hall_date.exam_cd = d.exam_cd AND exam_hall_date.hall_cd = d.hall_cd AND exam_hall_date.hall_date = d.hall_date
                                    ) e
            		INNER JOIN exam ON exam.exam_cd = e.exam_cd
            		INNER JOIN admission ON admission.admission_cd = exam.admission_cd
            		INNER JOIN examinee ON examinee.examinee_cd = e.examinee_cd
            		INNER JOIN exam_map ON exam_map.examinee_cd = e.examinee_cd
                    INNER JOIN hall ON hall.hall_cd = e.hall_cd
        <if test="param != null">
            <where>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                <if test="param.examDate != null">AND e.hall_date = #{param.examDate}</if>
                <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                <if test="param.examCd != null">AND exam_map.exam_cd = #{param.examCd}</if>
                <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%'</if>
                <if test="param.examineeCd != null">AND exam_map.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                <if test="param.groupNm != null">AND exam_map.group_nm = #{param.groupNm}</if>
                <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                <if test="param.scorerNm != null">
                    AND (e.scorer_nm1 LIKE '%' #{param.scorerNm} '%'
                          OR e.scorer_nm2 LIKE '%' #{param.scorerNm} '%'
                          OR e.scorer_nm3 LIKE '%' #{param.scorerNm} '%'
                          OR e.scorer_nm4 LIKE '%' #{param.scorerNm} '%'
                          OR e.scorer_nm5 LIKE '%' #{param.scorerNm} '%')
                </if>
                <if test="param.userAdmissions != null">AND exam.admission_cd IN (${param.userAdmissions})</if>
            </where>
        </if>
    </select>

    <select id="skkuPeriod1" resultType="com.humane.util.CamelMap">
        SELECT distinct admission.admission_nm, exam.type_nm, e.hall_date as exam_date
        , e.dept_nm, e.major_nm, e.examinee_cd, e.examinee_nm, e.group_nm
        , e.virt_no, e.total
        , e.scorer_nm1, e.total_score1, e.score1s1, e.score1s2, e.score1s3, e.score1s4, e.score1s5
        , e.scorer_nm2, e.total_score2, e.score2s1, e.score2s2, e.score2s3, e.score2s4, e.score2s5
        , e.scorer_nm3, e.total_score3, e.score3s1, e.score3s2, e.score3s3, e.score3s4, e.score3s5
        , e.scorer_nm4, e.total_score4, e.score4s1, e.score4s2, e.score4s3, e.score4s4, e.score4s5
        , e.scorer_nm5, e.total_score5, e.score5s1, e.score5s2, e.score5s3, e.score5s4, e.score5s5
        FROM ( SELECT exam_hall_date.exam_cd, exam_hall_date.hall_cd, exam.scorer_cnt, exam_hall_date.hall_date, d.virt_no
        , if(scored_cnt1 != 0, 1, 0) + if(scored_cnt2 != 0, 1, 0) + if(scored_cnt3 != 0, 1, 0) + if(scored_cnt4 != 0, 1, 0) + if(scored_cnt5 != 0, 1, 0)AS scored_cnt
        , scorer_nm1, case when total_score1 = '결시' then '결시' else cast(total_score1 AS unsigned) end AS total_score1
        , scorer_nm2, case when total_score2 = '결시' then '결시' else cast(total_score2 AS unsigned) end AS total_score2
        , scorer_nm3, case when total_score3 = '결시' then '결시' else cast(total_score3 AS unsigned) end AS total_score3
        , scorer_nm4, case when total_score4 = '결시' then '결시' else cast(total_score4 AS unsigned) end AS total_score4
        , scorer_nm5, case when total_score5 = '결시' then '결시' else cast(total_score5 AS unsigned) end AS total_score5
        , case when total_score1 = 'PASS' or total_score2 = 'PASS' or total_score3 = 'PASS' or total_score4 = 'PASS' or total_score5 = 'PASS' then 'PASS'
        when total_score1 = '결시' and total_score2 = '결시' and (total_score3 = '결시' or total_score3 is null) and (total_score4 = '결시' or total_score4 is null) and (total_score5 = '결시' or total_score5 is null) then '결시'
        else 'FAIL' end as total

        , score1S1, score1S2, score1S3, score1S4, score1S5
        , score2S1, score2S2, score2S3, score2S4, score2S5
        , score3S1, score3S2, score3S3, score3S4, score3S5
        , score4S1, score4S2, score4S3, score4S4, score4S5
        , score5S1, score5S2, score5S3, score5S4, score5S5
        , d.examinee_cd, d.examinee_nm, d.dept_nm, d.major_nm, d.group_nm
        FROM exam_hall_date
        INNER JOIN exam on exam.exam_cd = exam_hall_date.exam_cd
        LEFT JOIN (SELECT exam_cd, hall_cd, hall_date, virt_no, examinee_cd, examinee_nm, dept_nm, major_nm, group_nm
        , MIN(if(rn = 1, scorer_nm, NULL)) AS scorer_nm1, MIN(if(rn = 1, total_score, NULL)) AS total_score1
        , MIN(if(rn = 2, scorer_nm, NULL)) AS scorer_nm2, MIN(if(rn = 2, total_score, NULL)) AS total_score2
        , MIN(if(rn = 3, scorer_nm, NULL)) AS scorer_nm3, MIN(if(rn = 3, total_score, NULL)) AS total_score3
        , MIN(if(rn = 4, scorer_nm, NULL)) AS scorer_nm4, MIN(if(rn = 4, total_score, NULL)) AS total_score4
        , MIN(if(rn = 5, scorer_nm, NULL)) AS scorer_nm5, MIN(if(rn = 5, total_score, NULL)) AS total_score5

        , MIN(if(rn = 1, cnt, NULL)) AS scored_cnt1, MIN(if(rn = 2, cnt, NULL)) AS scored_cnt2
        , MIN(if(rn = 3, cnt, NULL)) AS scored_cnt3, MIN(if(rn = 4, cnt, NULL)) AS scored_cnt4
        , MIN(if(rn = 5, cnt, NULL)) AS scored_cnt5

        , MIN(if(rn = 1, score01, NULL)) AS score1S1, MIN(if(rn = 1, score02, NULL)) AS score1S2, MIN(if(rn = 1, score03, NULL)) AS score1S3, MIN(if(rn = 1, score04, NULL)) AS score1S4, MIN(if(rn = 1, score05, NULL)) AS score1S5
        , MIN(if(rn = 2, score01, NULL)) AS score2S1, MIN(if(rn = 2, score02, NULL)) AS score2S2, MIN(if(rn = 2, score03, NULL)) AS score2S3, MIN(if(rn = 2, score04, NULL)) AS score2S4, MIN(if(rn = 2, score05, NULL)) AS score2S5
        , MIN(if(rn = 3, score01, NULL)) AS score3S1, MIN(if(rn = 3, score02, NULL)) AS score3S2, MIN(if(rn = 3, score03, NULL)) AS score3S3, MIN(if(rn = 3, score04, NULL)) AS score3S4, MIN(if(rn = 3, score05, NULL)) AS score3S5
        , MIN(if(rn = 4, score01, NULL)) AS score4S1, MIN(if(rn = 4, score02, NULL)) AS score4S2, MIN(if(rn = 4, score03, NULL)) AS score4S3, MIN(if(rn = 4, score04, NULL)) AS score4S4, MIN(if(rn = 4, score05, NULL)) AS score4S5
        , MIN(if(rn = 5, score01, NULL)) AS score5S1, MIN(if(rn = 5, score02, NULL)) AS score5S2, MIN(if(rn = 5, score03, NULL)) AS score5S3, MIN(if(rn = 5, score04, NULL)) AS score5S4, MIN(if(rn = 5, score05, NULL)) AS score5S5
        FROM ( SELECT a.*
        , CASE WHEN @prev_exam_cd = exam_cd AND @prev_hall_cd = hall_cd AND @prev_hall_date = hall_date AND @prev_virt_no = virt_no then @rownum := @rownum + 1 else @rownum := 1 end AS rn
        , @prev_exam_cd := exam_cd
        , @prev_hall_cd := hall_cd
        , @prev_hall_date := hall_date
        , @prev_virt_no := virt_no
        FROM (SELECT exam_map.hall_date, score.exam_cd, score.hall_cd, score.virt_no, score.scorer_nm, score.total_score
        , score.score01, score.score02, score.score03, score.score04, score.score05, examinee.dept_nm, examinee.major_nm, examinee.examinee_cd, examinee.examinee_nm, exam_map.group_nm
        , (SELECT count(*) FROM score f WHERE f.virt_no = score.virt_no GROUP BY virt_no) AS cnt
        FROM score
        INNER JOIN exam ON exam.exam_cd = score.exam_cd
        INNER JOIN exam_map ON exam_map.exam_cd = score.exam_cd AND exam_map.hall_cd = score.hall_cd AND exam_map.virt_no = score.virt_no
        INNER JOIN examinee ON examinee.examinee_cd = exam_map.examinee_cd
        GROUP BY exam_map.hall_date,  score.exam_cd, score.hall_cd, score.virt_no, score.scorer_nm, score.total_score
        ORDER BY exam_map.hall_date, exam_cd, hall_cd, virt_no, scorer_nm) a
        , (SELECT @rownum := 1, @prev_exam_cd := '', @prev_hall_cd := '', @prev_hall_date := '', @prev_virt_no := '') b
        )c
        GROUP BY exam_cd, hall_cd, hall_date, virt_no) d on exam_hall_date.exam_cd = d.exam_cd AND exam_hall_date.hall_cd = d.hall_cd AND exam_hall_date.hall_date = d.hall_date
        ) e
        INNER JOIN exam ON exam.exam_cd = e.exam_cd
        INNER JOIN admission ON admission.admission_cd = exam.admission_cd
        INNER JOIN examinee ON examinee.examinee_cd = e.examinee_cd
        INNER JOIN exam_map ON exam_map.examinee_cd = e.examinee_cd
        INNER JOIN hall ON hall.hall_cd = e.hall_cd
        where length(examinee.examinee_cd) = 11 and exam.period = '1단계'
        <if test="param != null">
            <where>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                <if test="param.examDate != null">AND e.hall_date = #{param.examDate}</if>
                <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                <if test="param.examCd != null">AND exam_map.exam_cd = #{param.examCd}</if>
                <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%'</if>
                <if test="param.examineeCd != null">AND exam_map.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                <if test="param.groupNm != null">AND exam_map.group_nm = #{param.groupNm}</if>
                <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                <if test="param.scorerNm != null">
                    AND (e.scorer_nm1 LIKE '%' #{param.scorerNm} '%'
                    OR e.scorer_nm2 LIKE '%' #{param.scorerNm} '%'
                    OR e.scorer_nm3 LIKE '%' #{param.scorerNm} '%'
                    OR e.scorer_nm4 LIKE '%' #{param.scorerNm} '%'
                    OR e.scorer_nm5 LIKE '%' #{param.scorerNm} '%')
                </if>
                <if test="param.userAdmissions != null">AND exam.admission_cd IN (${param.userAdmissions})</if>
            </where>
        </if>
    </select>

    <!--
        <select id="drawData" resultType="com.humane.util.CamelMap">
            select a.exam_cd, a.hall_cd, a.virt_no, a.total
                 , admission.admission_nm
                 , exam.type_nm
                 , exam_map.hall_date as exam_date
                 , exam_map.eval_cd
                 , examinee.dept_nm
                 , examinee.major_nm
                 , examinee.examinee_cd
                 , examinee.examinee_nm
                 , (select count(*) + 1
                       from (select score.exam_cd, hall_cd, virt_no
                                   , ROUND(ifnull(if(score01 REGEXP '^-?[0-9\.]+$' > 0, score01 + exam.adjust, score01), 0)
                                        + ifnull(if(score02 REGEXP '^-?[0-9\.]+$' > 0, score02 + exam.adjust, score02), 0)
                                        + ifnull(if(score03 REGEXP '^-?[0-9\.]+$' > 0, score03 + exam.adjust, score03), 0)
                                        + ifnull(if(score04 REGEXP '^-?[0-9\.]+$' > 0, score04 + exam.adjust, score04), 0)
                                        + ifnull(if(score05 REGEXP '^-?[0-9\.]+$' > 0, score05 + exam.adjust, score05), 0)
                                        + ifnull(if(score06 REGEXP '^-?[0-9\.]+$' > 0, score06 + exam.adjust, score06), 0)
                                        + ifnull(if(score07 REGEXP '^-?[0-9\.]+$' > 0, score07 + exam.adjust, score07), 0)
                                        + ifnull(if(score08 REGEXP '^-?[0-9\.]+$' > 0, score08 + exam.adjust, score08), 0)
                                        + ifnull(if(score09 REGEXP '^-?[0-9\.]+$' > 0, score09 + exam.adjust, score09), 0)
                                        + ifnull(if(score10 REGEXP '^-?[0-9\.]+$' > 0, score09 + exam.adjust, score10), 0), 1)
                                         as total
                                from score inner join exam on score.exam_cd = exam.exam_cd
                               group by score.exam_cd, hall_cd, virt_no) t
                      where t.total > a.total
                        and a.exam_cd = t.exam_cd
                     ) rank
                    , (select count(*)
                       from (select score.exam_cd, hall_cd, virt_no
                                    , ROUND(ifnull(if(score01 REGEXP '^-?[0-9\.]+$' > 0, score01 + exam.adjust, score01), 0)
                                        + ifnull(if(score02 REGEXP '^-?[0-9\.]+$' > 0, score02 + exam.adjust, score02), 0)
                                        + ifnull(if(score03 REGEXP '^-?[0-9\.]+$' > 0, score03 + exam.adjust, score03), 0)
                                        + ifnull(if(score04 REGEXP '^-?[0-9\.]+$' > 0, score04 + exam.adjust, score04), 0)
                                        + ifnull(if(score05 REGEXP '^-?[0-9\.]+$' > 0, score05 + exam.adjust, score05), 0)
                                        + ifnull(if(score06 REGEXP '^-?[0-9\.]+$' > 0, score06 + exam.adjust, score06), 0)
                                        + ifnull(if(score07 REGEXP '^-?[0-9\.]+$' > 0, score07 + exam.adjust, score07), 0)
                                        + ifnull(if(score08 REGEXP '^-?[0-9\.]+$' > 0, score08 + exam.adjust, score08), 0)
                                        + ifnull(if(score09 REGEXP '^-?[0-9\.]+$' > 0, score09 + exam.adjust, score09), 0)
                                        + ifnull(if(score10 REGEXP '^-?[0-9\.]+$' > 0, score09 + exam.adjust, score10), 0), 1)
                                        as total
                               from score
                               inner join exam on score.exam_cd = exam.exam_cd
                      group by score.exam_cd, hall_cd, virt_no) t
                      where t.total = a.total
                        and a.exam_cd = t.exam_cd
                     ) cnt
              from (select score.exam_cd, hall_cd, virt_no
                          , ROUND(ifnull(if(score01 REGEXP '^-?[0-9\.]+$' > 0, score01 + exam.adjust, score01), 0)
                            + ifnull(if(score02 REGEXP '^-?[0-9\.]+$' > 0, score02 + exam.adjust, score02), 0)
                            + ifnull(if(score03 REGEXP '^-?[0-9\.]+$' > 0, score03 + exam.adjust, score03), 0)
                            + ifnull(if(score04 REGEXP '^-?[0-9\.]+$' > 0, score04 + exam.adjust, score04), 0)
                            + ifnull(if(score05 REGEXP '^-?[0-9\.]+$' > 0, score05 + exam.adjust, score05), 0)
                            + ifnull(if(score06 REGEXP '^-?[0-9\.]+$' > 0, score06 + exam.adjust, score06), 0)
                            + ifnull(if(score07 REGEXP '^-?[0-9\.]+$' > 0, score07 + exam.adjust, score07), 0)
                            + ifnull(if(score08 REGEXP '^-?[0-9\.]+$' > 0, score08 + exam.adjust, score08), 0)
                            + ifnull(if(score09 REGEXP '^-?[0-9\.]+$' > 0, score09 + exam.adjust, score09), 0)
                            + ifnull(if(score10 REGEXP '^-?[0-9\.]+$' > 0, score09 + exam.adjust, score10), 0), 1)
                            as total
                      from score inner join exam on score.exam_cd = exam.exam_cd
                     group by score.exam_cd, hall_cd, virt_no order by total desc
                    ) a
             inner join exam_map on a.exam_cd = exam_map.exam_cd and a.virt_no = exam_map.virt_no
             inner join exam on a.exam_cd = exam.exam_cd
             inner join admission on exam.admission_cd = admission.admission_cd
             inner join examinee on exam_map.examinee_cd = examinee.examinee_cd
             inner join hall on exam_map.hall_cd = hall.hall_cd
            <if test="param != null">
                <where>
                    <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                    <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                    <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                    <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                    <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                    <if test="param.examineeNm != null">AND examinee.examinee_nm LIKE '%' #{param.examineeNm} '%'</if>
                    <if test="param.examCd != null">AND exam_map.exam_cd = #{param.examCd}</if>
                    <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%'</if>
                    <if test="param.examineeCd != null">AND exam_map.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                    <if test="param.groupNm != null">AND exam_map.group_nm = #{param.groupNm}</if>
                    <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                    <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                    <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                    <if test="param.userAdmissions != null">AND exam.admission_cd IN (${param.userAdmissions})</if>
                </where>
            </if>
        </select>
    -->

    <!-- total_score까지 전송된 경우, 경북대 면접 적용 -->
    <select id="drawData" resultType="com.humane.util.CamelMap">
        select a.*
        , admission.admission_nm
        , exam.type_nm
        , exam_map.hall_date as exam_date
        , exam_map.eval_cd
        , exam.absent_value
        , examinee.dept_nm
        , examinee.major_nm
        , examinee.examinee_cd
        , examinee.examinee_nm
        , (select count(*) + 1
            from (select exam_cd, hall_cd, virt_no, sum(total_score) as total from score group by exam_cd, hall_cd, virt_no) t
                    where t.total > a.total and a.exam_cd = t.exam_cd
            ) rank
        , (select count(*)
            from (select exam_cd, hall_cd, virt_no, sum(total_score) as total from score group by exam_cd, hall_cd, virt_no) t
                    where t.total = a.total and a.exam_cd = t.exam_cd
            ) - 1 cnt
        from (select exam_cd, hall_cd, virt_no, sum(total_score) as total from score group by exam_cd, hall_cd, virt_no order by total desc) a
        inner join exam_map on a.exam_cd = exam_map.exam_cd and a.virt_no = exam_map.virt_no
        inner join exam on a.exam_cd = exam.exam_cd
        inner join admission on exam.admission_cd = admission.admission_cd
        inner join examinee on exam_map.examinee_cd = examinee.examinee_cd
        inner join hall on exam_map.hall_cd = hall.hall_cd
        <if test="param != null">
            <where>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                <if test="param.examineeNm != null">AND examinee.examinee_nm LIKE '%' #{param.examineeNm} '%'</if>
                <if test="param.examCd != null">AND exam_map.exam_cd = #{param.examCd}</if>
                <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%'</if>
                <if test="param.examineeCd != null">AND exam_map.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                <if test="param.groupNm != null">AND exam_map.group_nm = #{param.groupNm}</if>
                <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                <if test="param.userAdmissions != null">AND exam.admission_cd IN (${param.userAdmissions})</if>
            </where>
        </if>
    </select>

    <insert id="fillScore" parameterType="com.humane.smps.dto.EvalDto">
        INSERT INTO score(score01, score_dttm, score_seq, scorer_nm, sheet_no, total_score, virt_no, exam_cd, hall_cd)
        VALUES (#{param.score01}, NOW(), '1', #{param.scorerNm}, '1', #{param.score01}, #{param.virtNo}, #{param.examCd}, #{param.hallCd})
    </insert>

    <select id="scoreUpload" resultType="com.humane.smps.dto.ScoreUploadDto">
        select CONVERT(YEAR(CURDATE()) + 1, CHAR(4)) as year
             , exam_map.examinee_cd
             , if(exam_map.virt_no is null, 1, 0) as is_attend
             , if(a.scorer_nm is null, '%', a.scorer_nm) as scorer_cd
             , if(a.i is null, '%', a.i) as item_no
             , if(a.s is null, '', a.s) as score
          from exam_map
          left join (select sc.exam_cd, virt_no, scorer_nm
                              , right(concat('00', item_no),2) as i
                               , case item.item_no
                                      when 1 then score01
                                      when 2 then score02
                                      when 3 then score03
                                      when 4 then score04
                                      when 5 then score05
                                      when 6 then score06
                                      when 7 then score07
                                      when 8 then score08
                                      when 9 then score09
                                      when 10 then score10
                                 end as s
                           from (
                                 select score.exam_cd, score.virt_no
                                      , if(score01 REGEXP '^-?[0-9\.]+$' > 0, score01 + exam.adjust, score01) as score01
                                      , if(score02 REGEXP '^-?[0-9\.]+$' > 0, score02 + exam.adjust, score02) as score02
                                      , if(score03 REGEXP '^-?[0-9\.]+$' > 0, score03 + exam.adjust, score03) as score03
                                      , if(score04 REGEXP '^-?[0-9\.]+$' > 0, score04 + exam.adjust, score04) as score04
                                      , if(score05 REGEXP '^-?[0-9\.]+$' > 0, score05 + exam.adjust, score05) as score05
                                      , if(score06 REGEXP '^-?[0-9\.]+$' > 0, score06 + exam.adjust, score06) as score06
                                      , if(score07 REGEXP '^-?[0-9\.]+$' > 0, score07 + exam.adjust, score07) as score07
                                      , if(score08 REGEXP '^-?[0-9\.]+$' > 0, score08 + exam.adjust, score08) as score08
                                      , if(score09 REGEXP '^-?[0-9\.]+$' > 0, score09 + exam.adjust, score09) as score09
                                      , if(score10 REGEXP '^-?[0-9\.]+$' > 0, score10 + exam.adjust, score10) as score10
                                      , if(@pVirtNo = score.virt_no AND @pExamCd = score.exam_cd, @rownum:=@rownum + 1, @rownum:=1) scorer_nm
                                      , (@pVirtNo :=score.virt_no) pVirtNo
                                          , (@pExamCd :=score.exam_cd) pExamCd
                                      from score
                                     inner join exam on score.exam_cd = exam.exam_cd
                                     inner join (select @pExamCd := '', @pVirtNo := '', @rnum := 0) t
                                     order by exam_cd, virt_no, score.scorer_nm
                                 ) sc
                          inner join item on sc.exam_cd = item.exam_cd) a
               on exam_map.exam_cd = a.exam_cd and exam_map.virt_no = a.virt_no
               inner join exam on exam.exam_cd = exam_map.exam_cd
               inner join admission on admission.admission_cd = exam.admission_cd
                <where>
                       <if test="param != null">
                           <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                           <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                           <if test="param.admissionCd != null">AND admission.admission_cd = #{param.admissionCd}</if>
                       </if>
                </where>
        order by examinee_cd, scorer_nm, i
    </select>

    <select id="sqlEdit" resultType="java.util.LinkedHashMap">
        ${sql}
    </select>

    <select id="lawScoreUpload" resultType="com.humane.smps.dto.ScoreUploadDto">
        select '2018' as year
            , exam_map.examinee_cd as examinee_cd
            , if(a.s is null, 1, 0) as is_attend
            , if(b.scorer_cd is null, '%', b.scorer_cd) as scorer_cd
            , if(a.i is null, '%', a.i) as item_no
            , if(a.s is null, '', a.s) as score
        from exam_map
        inner join exam on exam.exam_cd = exam_map.exam_cd
        inner join admission on admission.admission_cd = exam.admission_cd
        left join (select distinct score.exam_cd, virt_no, if(score.total_score = 'F', null, scorer_nm) as scorer_nm
                                    , if(score.total_score = 'F', null, right(concat('00', item_no),2)) as i
                                    , if(score.total_score = 'F', null,
                                    case item.item_no
                                        when 1 then if(score01 REGEXP '^-?[0-9\.]+$' > 0, score01 + exam.adjust, score01)
                                        when 2 then if(score02 REGEXP '^-?[0-9\.]+$' > 0, score02 + exam.adjust, score02)
                                        when 3 then if(score03 REGEXP '^-?[0-9\.]+$' > 0, score03 + exam.adjust, score03)
                                        when 4 then if(score04 REGEXP '^-?[0-9\.]+$' > 0, score04 + exam.adjust, score04)
                                        when 5 then if(score05 REGEXP '^-?[0-9\.]+$' > 0, score05 + exam.adjust, score05)
                                        when 6 then if(score06 REGEXP '^-?[0-9\.]+$' > 0, score06 + exam.adjust, score06)
                                        when 7 then if(score07 REGEXP '^-?[0-9\.]+$' > 0, score07 + exam.adjust, score07)
                                        when 8 then if(score08 REGEXP '^-?[0-9\.]+$' > 0, score08 + exam.adjust, score08)
                                        when 9 then if(score09 REGEXP '^-?[0-9\.]+$' > 0, score09 + exam.adjust, score09)
                                        when 10 then if(score10 REGEXP '^-?[0-9\.]+$' > 0, score10 + exam.adjust, score10)
                                    end) as s
                    from score
                    inner join exam on score.exam_cd = exam.exam_cd
                    inner join item on score.exam_cd = item.exam_cd) a
        on exam_map.exam_cd = a.exam_cd and exam_map.virt_no = a.virt_no
        left join (           select 'A024769' scorer_cd, '김재봉' scorer_nm
                    union all select 'A033093', '오윤'
                    union all select 'A025984', '이호영'
                    union all select 'A022389', '김종우'
                    union all select 'A033094', '송호영'
                    union all select 'A006066', '정문식'
                    union all select 'A044791', '박선아'
                    union all select 'A043704', '이광걸'
                    ) b
                    on a.scorer_nm = b.scorer_nm
        <where>
            <if test="param != null">
                <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.admissionCd != null">AND admission.admission_cd = #{param.admissionCd}</if>
            </if>
        </where>

       <!-- inner join exam on exam.exam_cd = exam_map.exam_cd
        inner join admission on admission.admission_cd = exam.admission_cd
        <where>
            <if test="param != null">
                <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                <if test="param.admissionCd != null">AND admission.admission_cd = #{param.admissionCd}</if>
            </if>
        </where>
-->
        order by examinee_cd, scorer_cd, i
    </select>

    <select id="failList" resultType="com.humane.smps.dto.ExamineeDto">
        SELECT DISTINCT CONVERT(YEAR(CURDATE()) + 1, CHAR(4)) as year
        , exam_map.examinee_cd
        , examinee.examinee_nm
        FROM exam_map
        INNER JOIN examinee ON examinee.examinee_cd = exam_map.examinee_cd
        INNER JOIN score ON score.exam_cd = exam_map.exam_cd AND score.virt_no = exam_map.virt_no
        inner join exam on exam.exam_cd = exam_map.exam_cd
        inner join admission on admission.admission_cd = exam.admission_cd
        <where>
            and score.total_score = 'F'
            <if test="param != null">
                <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                <if test="param.admissionCd != null">AND admission.admission_cd = #{param.admissionCd}</if>
            </if>
        </where>
    </select>

    <select id="medScoreUpload" resultType="com.humane.smps.dto.ScoreUploadDto">
        -- 의대
        select CONVERT(YEAR(CURDATE()) + 1, CHAR(4)) as year
             , exam_map.examinee_cd as examinee_cd
             , if(a.s is null, 1, 0) as is_attend
             , if(b.scorer_cd is null, '%', b.scorer_cd) as scorer_cd
             , if(a.i is null, '%', a.i) as item_no
             , if(a.s is null, '', a.s) as score
          from exam_map
          inner join exam ON exam.exam_cd = exam_map.exam_cd
          inner join admission ON admission.admission_cd = exam.admission_cd
          left join (select distinct score.exam_cd, virt_no, if(score.total_score = 'F', null, scorer_nm) as scorer_nm
                                    , if(score.total_score = 'F', null, right(concat('00', item_no),2)) as i
                                    , if(score.total_score = 'F', null
                               , case item.item_no
                                      when 1 then (select max_score from devi where item.devi_cd = devi.fk_devi_cd and score01 = devi.devi_nm)
                                      when 2 then (select max_score from devi where item.devi_cd = devi.fk_devi_cd and score02 = devi.devi_nm)
                                      when 3 then (select max_score from devi where item.devi_cd = devi.fk_devi_cd and score03 = devi.devi_nm)
                                      when 4 then (select max_score from devi where item.devi_cd = devi.fk_devi_cd and score04 = devi.devi_nm)
                                      when 5 then (select max_score from devi where item.devi_cd = devi.fk_devi_cd and score05 = devi.devi_nm)
                                      when 6 then (select max_score from devi where item.devi_cd = devi.fk_devi_cd and score06 = devi.devi_nm)
                                      when 7 then (select max_score from devi where item.devi_cd = devi.fk_devi_cd and score07 = devi.devi_nm)
                                      when 8 then (select max_score from devi where item.devi_cd = devi.fk_devi_cd and score08 = devi.devi_nm)
                                      when 9 then (select max_score from devi where item.devi_cd = devi.fk_devi_cd and score09 = devi.devi_nm)
                                      when 10 then (select max_score from devi where item.devi_cd = devi.fk_devi_cd and score10 = devi.devi_nm)
                                 end) as s
                           from score
                          inner join item on score.exam_cd = item.exam_cd
                          inner join devi on devi.devi_cd = item.devi_cd
                          ) a
               on exam_map.exam_cd = a.exam_cd and exam_map.virt_no = a.virt_no

          left join (           select 'A004168' scorer_cd, '고현철' scorer_nm
                                union all select 'A013682', '임태호'
                                union all select 'A023782', '한진욱'
                                union all select 'A044991', '남진우'

                                union all select 'A032902', '김현영'
                                union all select 'A040358', '호정규'
                                union all select 'A004545', '노재근'
                                union all select 'A005066', '신인철'

                                union all select 'A022556', '정진환'
                                union all select 'A018464', '최동호'
                                union all select 'A007731', '강영종'
                                union all select 'A038943', '최제민'
               ) b on a.scorer_nm = b.scorer_nm
        <where>
            <if test="param != null">
                <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                <if test="param.admissionCd != null">AND admission.admission_cd = #{param.admissionCd}</if>
            </if>
        </where>
        order by examinee_cd, scorer_cd, i
    </select>
<!--
    <select id="physical" resultType="com.humane.smps.dto.physicalDto">
        select admission.admission_nm
                , exam.exam_cd
                , exam.type_nm
                , exam_hall_date.hall_date as exam_date
                , case
                        when exam_map.group_nm = 'A1' then '08:30'
                        when exam_map.group_nm = 'A2' then '12:30'
                        when exam_map.group_nm = 'A3' then '17:00'
                        when exam_map.group_nm = 'B1' then '08:30'
                        when exam_map.group_nm = 'B2' then '12:30'
                        when exam_map.group_nm = 'B3' then '17:00'
                  end as exam_time
                , examinee.dept_nm
                , examinee.major_nm
                , hall.head_nm
                , hall.bldg_nm
                , hall.hall_nm
                , examinee.examinee_cd
                , examinee.examinee_nm
                , exam_map.virt_no
                , exam_map.group_nm
                , result.scorer_nm11, result.scorer_nm12, result.score11, score12, total01, grade01, score_dttm1
                , result.scorer_nm21, result.scorer_nm22, result.score21, score22, total02, grade02, score_dttm2
                , result.scorer_nm31, result.scorer_nm32,
                  case
                    when total03 = '실격' or total03 is null
                    then total03
                    else concat(lpad(floor(total03 / 60), 2, '0'),':', lpad(floor(total03) % 60, 2, '0'), ':', substring(total03, instr(total03, '.')+1))
                  end total03, grade03, score_dttm3
                    , result.scorer_nm41, result.scorer_nm42,
                  case
                    when total04 = '실격' or total04 is null
                    then total04
                    else concat(lpad(floor(total04 / 60), 2, '0'),':', lpad(floor(total04) % 60, 2, '0'), ':', substring(total04, instr(total04, '.')+1))
                  end total04, grade04, score_dttm4
                from exam_map
                inner join exam on exam.exam_cd = exam_map.exam_cd and exam.fk_exam_cd is null
                inner join admission on admission.admission_cd = exam.admission_cd
                inner join examinee on examinee.examinee_cd = exam_map.examinee_cd
                inner join hall on hall.hall_cd = exam_map.hall_cd
                INNER JOIN exam_hall_date ON exam_hall_date.exam_cd = exam.exam_cd AND exam_hall_date.hall_cd = hall.hall_cd AND exam_hall_date.hall_date = exam_map.hall_date
                left join (select a.examinee_cd, a.virt_no
                , scorer_nm11, scorer_nm12, score11, score12, total01
                , if(total01 = '실격', '0'
                    , (select grade from score_devi where a.exam_cd1 = exam_cd and a.gender = gender and total01 between min_score and max_score)
                    ) grade01
                , score_dttm1
                , scorer_nm21, scorer_nm22, score21, score22, total02
                , if(total02 = '실격', '0'
                    , (select grade from score_devi where a.exam_cd2 = exam_cd and a.gender = gender and total02 between min_score and max_score)
                    ) grade02
                , score_dttm2
                , scorer_nm31, scorer_nm32, total03
                , if(total03 = '실격', '0'
        , if(total03 = '0.00', (select min(grade) from score_devi where a.exam_cd3 = exam_cd and a.gender = gender), (select grade from score_devi where a.exam_cd3 = exam_cd and a.gender = gender and total03 between min_score and max_score))
                    ) grade03
                , score_dttm3
                , scorer_nm41, scorer_nm42, total04
                , if(total04 = '실격', '0'
        , if(total04 = '0.00', (select min(grade) from score_devi where a.exam_cd4 = exam_cd and a.gender = gender), (select grade from score_devi where a.exam_cd4 = exam_cd and a.gender = gender and total04 between min_score and max_score))
                    ) grade04
                , score_dttm4
                from ( select exam_map.examinee_cd, score.virt_no
                , substring(exam_map.examinee_cd, 5, 1) gender
                , min(if(score.exam_cd = '8011', score.scorer_nm, null)) scorer_nm11
                , min(if(score.exam_cd = '8011', score.scorer_nm2, null)) scorer_nm12
                , min(if(score.exam_cd = '8011', score.exam_cd, null)) exam_cd1
                , min(if(score.exam_cd = '8011', score01, null)) score11
                , min(if(score.exam_cd = '8011', score02, null)) score12
                , min(if(score.exam_cd = '8011', total_score, null)) total01
                , min(if(score.exam_cd = '8011', score.score_dttm, null)) score_dttm1
                , min(if(score.exam_cd = '8012', score.scorer_nm, null)) scorer_nm21
                , min(if(score.exam_cd = '8012', score.scorer_nm2, null)) scorer_nm22
                , min(if(score.exam_cd = '8012', score.exam_cd, null)) exam_cd2
                , min(if(score.exam_cd = '8012', score01, null)) score21
                , min(if(score.exam_cd = '8012', score02, null)) score22
                , min(if(score.exam_cd = '8012', total_score, null)) total02
                , min(if(score.exam_cd = '8012', score.score_dttm, null)) score_dttm2
                , min(if(score.exam_cd = '8013', score.scorer_nm, null)) scorer_nm31
                , min(if(score.exam_cd = '8013', score.scorer_nm2, null)) scorer_nm32
                , min(if(score.exam_cd = '8013', score.exam_cd, null)) exam_cd3
                , min(if(score.exam_cd = '8013', total_score, null)) total03
                , min(if(score.exam_cd = '8013', score.score_dttm, null)) score_dttm3
                , min(if(score.exam_cd = '8014', score.scorer_nm, null)) scorer_nm41
                , min(if(score.exam_cd = '8014', score.scorer_nm2, null)) scorer_nm42
                , min(if(score.exam_cd = '8014', score.exam_cd, null)) exam_cd4
                , min(if(score.exam_cd = '8014', total_score, null)) total04
                , min(if(score.exam_cd = '8014', score.score_dttm, null)) score_dttm4
                from score
                inner join exam_map on exam_map.exam_cd = score.exam_cd and exam_map.virt_no = score.virt_no
                inner join exam on exam.exam_cd = exam_map.exam_cd and exam.exam_cd = score.exam_cd
                where score.exam_cd in ('8011', '8012', '8013', '8014')
                group by exam_map.examinee_cd) a
                ) result on result.examinee_cd = exam_map.examinee_cd
                    <where>
                        AND exam.exam_cd = '8011'
                        <if test="param != null">
                            <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                            <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                            <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                            <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                            <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                            <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                            <if test="param.groupNm != null">AND exam_map.group_nm LIKE '%' #{param.groupNm} '%' </if>
                            <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                            <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                            <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                            <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%' </if>
                            <if test="param.examineeCd != null">AND examinee.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                            <if test="param.examineeNm != null">AND examinee.examinee_nm LIKE '%' #{param.examineeNm} '%'</if>
                            <if test="param.isVirtNo != null">
                                <if test="param.isVirtNo == true">AND exam_map.virt_no IS NOT NULL</if>
                                <if test="param.isVirtNo == false">AND exam_map.virt_no IS NULL</if>
                            </if>
                        </if>
                    </where>
    </select>
-->
    <select id="physical" resultType="com.humane.smps.dto.physicalDto">
        select admission.admission_nm
                , exam.exam_cd
                , exam.type_nm
                , exam_hall_date.hall_date as exam_date
                /*, case
                when exam_map.group_nm = 'A1' then '08:30'
                when exam_map.group_nm = 'A2' then '12:30'
                when exam_map.group_nm = 'A3' then '17:00'
                when exam_map.group_nm = 'B1' then '08:30'
                when exam_map.group_nm = 'B2' then '12:30'
                when exam_map.group_nm = 'B3' then '17:00'
                end as exam_time*/
                , examinee.dept_nm
                , examinee.major_nm
                , hall.head_nm
                , hall.bldg_nm
                , hall.hall_nm
                , examinee.examinee_cd
                , examinee.examinee_nm
                , exam_map.virt_no
                , exam_map.group_nm
                , result.scorer_nm11, result.scorer_nm12, result.score11, score12, total01, score_dttm1
                , result.scorer_nm21, result.scorer_nm22, result.score21, score22, total02, score_dttm2
                , result.scorer_nm31, result.scorer_nm32,
                case
                when total03 = '실격' or total03 is null or total03 = '미응시'
                then total03
                else concat(lpad(floor(total03 / 60), 2, '0'),':', lpad(floor(total03) % 60, 2, '0'), ':', substring(total03, instr(total03, '.')+1))
                end total03, score_dttm3
                , result.scorer_nm41, result.scorer_nm42,
                case
                when total04 = '실격' or total04 is null or total04 = '미응시'
                then total04
                else concat(lpad(floor(total04 / 60), 2, '0'),':', lpad(floor(total04) % 60, 2, '0'), ':', substring(total04, instr(total04, '.')+1))
                end total04, score_dttm4
                from exam_map
                inner join exam on exam.exam_cd = exam_map.exam_cd and exam.fk_exam_cd is null
                inner join admission on admission.admission_cd = exam.admission_cd
                inner join examinee on examinee.examinee_cd = exam_map.examinee_cd
                inner join hall on hall.hall_cd = exam_map.hall_cd
                INNER JOIN exam_hall_date ON exam_hall_date.exam_cd = exam.exam_cd AND exam_hall_date.hall_cd = hall.hall_cd AND exam_hall_date.hall_date = exam_map.hall_date
                left join (select a.examinee_cd, a.virt_no
                                    , scorer_nm11, scorer_nm12, score11, score12, total01, score_dttm1
                                    , scorer_nm21, scorer_nm22
                                    , if(score21 = '파울', score21, (select max_score from score_devi2 where a.exam_cd2 = exam_cd and score21 = grade)) as score21
                                    , if(score22 = '파울', score22, (select max_score from score_devi2 where a.exam_cd2 = exam_cd and score22 = grade)) as score22
                                    , if(total02 = '파울', total02, (select max_score from score_devi2 where a.exam_cd2 = exam_cd and total02 = grade)) as total02, score_dttm2
                                    , scorer_nm31, scorer_nm32, total03, score_dttm3
                                    , scorer_nm41, scorer_nm42, total04, score_dttm4
                            from ( select exam_map.examinee_cd, score.virt_no
                                            , substring(exam_map.examinee_cd, 5, 1) gender
                                            , min(if(score.exam_cd = '8021', score.scorer_nm, null)) scorer_nm11
                                            , min(if(score.exam_cd = '8021', score.scorer_nm2, null)) scorer_nm12
                                            , min(if(score.exam_cd = '8021', score.exam_cd, null)) exam_cd1
                                            , min(if(score.exam_cd = '8021', score01, null)) score11
                                            , min(if(score.exam_cd = '8021', score02, null)) score12
                                            , min(if(score.exam_cd = '8021', total_score, null)) total01
                                            , min(if(score.exam_cd = '8021', score.score_dttm, null)) score_dttm1
                                            , min(if(score.exam_cd = '8022', score.scorer_nm, null)) scorer_nm21
                                            , min(if(score.exam_cd = '8022', score.scorer_nm2, null)) scorer_nm22
                                            , min(if(score.exam_cd = '8022', score.exam_cd, null)) exam_cd2
                                            , min(if(score.exam_cd = '8022', score01, null)) score21
                                            , min(if(score.exam_cd = '8022', score02, null)) score22
                                            , min(if(score.exam_cd = '8022', total_score, null)) total02
                                            , min(if(score.exam_cd = '8022', score.score_dttm, null)) score_dttm2
                                            , min(if(score.exam_cd = '8023', score.scorer_nm, null)) scorer_nm31
                                            , min(if(score.exam_cd = '8023', score.scorer_nm2, null)) scorer_nm32
                                            , min(if(score.exam_cd = '8023', score.exam_cd, null)) exam_cd3
                                            , min(if(score.exam_cd = '8023', total_score, null)) total03
                                            , min(if(score.exam_cd = '8023', score.score_dttm, null)) score_dttm3
                                            , min(if(score.exam_cd = '8024', score.scorer_nm, null)) scorer_nm41
                                            , min(if(score.exam_cd = '8024', score.scorer_nm2, null)) scorer_nm42
                                            , min(if(score.exam_cd = '8024', score.exam_cd, null)) exam_cd4
                                            , min(if(score.exam_cd = '8024', total_score, null)) total04
                                            , min(if(score.exam_cd = '8024', score.score_dttm, null)) score_dttm4
                                    from score
                                    inner join exam_map on exam_map.exam_cd = score.exam_cd and exam_map.virt_no = score.virt_no
                                    inner join exam on exam.exam_cd = exam_map.exam_cd and exam.exam_cd = score.exam_cd
                                    where score.exam_cd in ('8021', '8022', '8023', '8024')
                                    group by exam_map.examinee_cd) a
                            ) result on result.examinee_cd = exam_map.examinee_cd
                <where> AND exam.exam_cd = '8021'
                <if test="param != null">
                    <if test="param.userAdmissions != null">AND admission.admission_cd IN (${param.userAdmissions})</if>
                    <if test="param.admissionNm != null">AND admission.admission_nm = #{param.admissionNm}</if>
                    <if test="param.typeNm != null">AND exam.type_nm = #{param.typeNm}</if>
                    <if test="param.examDate != null">AND exam_map.hall_date = #{param.examDate}</if>
                    <if test="param.examTime != null">AND exam.exam_time = #{param.examTime}</if>
                    <if test="param.deptNm != null">AND examinee.dept_nm = #{param.deptNm}</if>
                    <if test="param.majorNm != null">AND examinee.major_nm = #{param.majorNm}</if>
                    <if test="param.groupNm != null">AND exam_map.group_nm LIKE '%' #{param.groupNm} '%' </if>
                    <if test="param.headNm != null">AND hall.head_nm = #{param.headNm}</if>
                    <if test="param.bldgNm != null">AND hall.bldg_nm = #{param.bldgNm}</if>
                    <if test="param.hallNm != null">AND hall.hall_nm = #{param.hallNm}</if>
                    <if test="param.virtNo != null">AND exam_map.virt_no LIKE '%' #{param.virtNo} '%' </if>
                    <if test="param.examineeCd != null">AND examinee.examinee_cd LIKE '%' #{param.examineeCd} '%'</if>
                    <if test="param.examineeNm != null">AND examinee.examinee_nm LIKE '%' #{param.examineeNm} '%'</if>
                    <if test="param.isVirtNo != null">
                        <if test="param.isVirtNo == true">AND exam_map.virt_no IS NOT NULL</if>
                        <if test="param.isVirtNo == false">AND exam_map.virt_no IS NULL</if>
                    </if>
                </if>
            </where>
    </select>
    <!--
    <select id="runningResult" resultType="com.humane.util.CamelMap">
        select examinee.examinee_cd
                , case
                    when total03 = '실격' or total03 is null
                    then total03
                    else concat(lpad(floor(total03 / 60),2,'0'),':', lpad(floor(total03) % 60, 2, '0'), ':', substring(total03, instr(total03, '.')+1))
                  end total03
                , case
                    when total04 = '실격' or total04 is null
                    then total04
                    else concat(lpad(floor(total04 / 60),2,'0'),':', lpad(floor(total04) % 60, 2, '0'), ':', substring(total04, instr(total04, '.')+1))
                  end total04
            from exam_map
            inner join exam on exam.exam_cd = exam_map.exam_cd and exam.fk_exam_cd is null
            inner join examinee on examinee.examinee_cd = exam_map.examinee_cd
            left join (select a.examinee_cd, a.virt_no, total03, total04
                            from ( select exam_map.examinee_cd, score.virt_no
                                        , min(if(score.exam_cd = '8013', total_score, null)) total03
                                        , min(if(score.exam_cd = '8014', total_score, null)) total04
                                        from score
                                        inner join exam_map on exam_map.exam_cd = score.exam_cd and exam_map.virt_no = score.virt_no
                                        inner join exam on exam.exam_cd = exam_map.exam_cd and exam.exam_cd = score.exam_cd
                                        group by exam_map.examinee_cd) a
            ) result on result.examinee_cd = exam_map.examinee_cd
            where total03 is not null or total04 is not null
    </select>
    -->

    <select id="runningResult" resultType="com.humane.util.CamelMap">
        select examinee.examinee_cd
                , case
                    when total03 = '실격' or total03 is null or total03 = '미응시'
                    then total03
                    else concat(lpad(floor(total03 / 60),2,'0'),':', lpad(floor(total03) % 60, 2, '0'), ':', substring(total03, instr(total03, '.')+1))
                end total03
                , case
                    when total04 = '실격' or total04 is null or total04 = '미응시'
                    then total04
                    else concat(lpad(floor(total04 / 60),2,'0'),':', lpad(floor(total04) % 60, 2, '0'), ':', substring(total04, instr(total04, '.')+1))
                end total04
          from exam_map
          inner join exam on exam.exam_cd = exam_map.exam_cd and exam.fk_exam_cd is null
          inner join examinee on examinee.examinee_cd = exam_map.examinee_cd
          left join (select a.examinee_cd, a.virt_no, total03, total04
                      from ( select exam_map.examinee_cd, score.virt_no
                                  , min(if(score.exam_cd = '8023', total_score, null)) total03
                                  , min(if(score.exam_cd = '8024', total_score, null)) total04
                              from score
                              inner join exam_map on exam_map.exam_cd = score.exam_cd and exam_map.virt_no = score.virt_no
                              inner join exam on exam.exam_cd = exam_map.exam_cd and exam.exam_cd = score.exam_cd
                              group by exam_map.examinee_cd) a
                      ) result on result.examinee_cd = exam_map.examinee_cd
          where total03 is not null or total04 is not null
    </select>

    <select id="ericaExamInfo" resultType="com.humane.smps.dto.ExamDto">
        SELECT exam.exam_cd, exam.exam_nm
        FROM exam
        <where>
            <if test="param!=null">
                AND exam.exam_cd LIKE #{param}
            </if>
        </where>
    </select>

    <select id="ericaItemCnt" resultType="java.lang.Long">
        SELECT max(cnt)
        FROM (
                 SELECT count(*) AS cnt
                 FROM item
                 WHERE exam_cd = #{param}
                 GROUP BY exam_cd
             ) a
    </select>

    <select id="attendance" resultType="com.humane.smps.dto.ExamineeDto">
        SELECT DISTINCT admission.admission_nm, exam_hall_date.hall_date AS exam_date
                , examinee.major_nm, examinee.examinee_cd, examinee.examinee_nm, exam_map.virt_no, exam_map.group_nm
                -- , IF(exam_map.virt_no IS NULL, '결시', '응시') AS attendance
                , if(score.score01 is null, '결시', '응시') as attendance
        FROM exam_map
        INNER JOIN exam ON exam.exam_cd = exam_map.exam_cd
        INNER JOIN exam_hall_date ON exam_hall_date.exam_cd = exam.exam_cd AND exam_hall_date.hall_date = exam_map.hall_date
        INNER JOIN examinee ON examinee.examinee_cd = exam_map.examinee_cd
        INNER JOIN admission ON admission.admission_cd = exam.admission_cd
        LEFT JOIN score on score.virt_no = exam_map.virt_no
        <where>
            <if test="param != null">
                <if test="param.admissionNm != null"> AND admission.admission_nm = #{param.admissionNm} </if>
                <if test="param.examDate != null"> AND exam_hall_date.hall_date = #{param.examDate} </if>
                <if test="param.deptNm != null"> AND examinee.dept_nm = #{param.deptNm} </if>
                <if test="param.majorNm != null"> AND examinee.major_nm = #{param.majorNm} </if>
            </if>
        </where>
    </select>
</mapper>